[
  {
    "file": "conftest.py",
    "line": 50,
    "code": "    _faulthandler = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "faulthandler",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     import signal as _signal\n    2: except Exception:\n    3:     _faulthandler = None  # type: ignore\n    4: \n    5: # Periodic persistence is normalized off via the autouse env fixture below; avoid",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "conftest.py",
    "line": 389,
    "code": "            sys.modules[ALIAS_NAME] = sys.modules.get(\"agents\")",
    "category": "sys_modules_assignment",
    "intent": "module injection/aliasing",
    "import_base": "sys",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": "# Reuse the existing 'agents' module object to ensure patches applied via either\n# import path affect the single shared module (avoids divergent singletons).",
    "context": "    1:             # Reuse the existing 'agents' module object to ensure patches applied via either\n    2:             # import path affect the single shared module (avoids divergent singletons).\n    3:             sys.modules[ALIAS_NAME] = sys.modules.get(\"agents\")\n    4:         # Also alias the core subpackage explicitly so 'from jarvis2.agents.core import ...'\n    5:         # and 'import agents.core.something' both resolve to the same module hierarchy.",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "conftest.py",
    "line": 844,
    "code": "    PytestRemovedIn9Warning = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "_pytest",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from _pytest.warning_types import PytestRemovedIn9Warning  # type: ignore\n    2: except Exception:  # pragma: no cover - older/newer pytest internals may differ\n    3:     PytestRemovedIn9Warning = None  # type: ignore\n    4: \n    5: if PytestRemovedIn9Warning is not None:",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "tests/api/test_ws_ui_scaffold.py",
    "line": 12,
    "code": "os.environ[\"ENABLE_UI_WS\"] = \"1\"  # ensure flag set before app import",
    "category": "global_env_mutation",
    "intent": "unspecified monkey patch",
    "import_base": "os",
    "is_test": true,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     HAS_WS = False\n    2: \n    3: os.environ[\"ENABLE_UI_WS\"] = \"1\"  # ensure flag set before app import\n    4: from fastapi.testclient import TestClient\n    5: ",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "tests/api/test_events_ws.py",
    "line": 8,
    "code": "os.environ[\"ENABLE_EVENTS\"] = \"1\"",
    "category": "global_env_mutation",
    "intent": "unspecified monkey patch",
    "import_base": "os",
    "is_test": true,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": "# Ensure the events router is enabled at import time",
    "context": "    1: \n    2: # Ensure the events router is enabled at import time\n    3: os.environ[\"ENABLE_EVENTS\"] = \"1\"\n    4: \n    5: # ruff: noqa: I001",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "tests/api/test_events_sse.py",
    "line": 15,
    "code": "os.environ[\"ENABLE_EVENTS\"] = \"1\"",
    "category": "global_env_mutation",
    "intent": "unspecified monkey patch",
    "import_base": "os",
    "is_test": true,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": "# Ensure flags before importing app so the router is included at import time",
    "context": "    1: \n    2: # Ensure flags before importing app so the router is included at import time\n    3: os.environ[\"ENABLE_EVENTS\"] = \"1\"\n    4: # Speed up heartbeats for deterministic SSE activity in tests\n    5: os.environ[\"EVENTS_SSE_HEARTBEAT_SEC\"] = \"0.2\"",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "tests/api/test_events_sse.py",
    "line": 17,
    "code": "os.environ[\"EVENTS_SSE_HEARTBEAT_SEC\"] = \"0.2\"",
    "category": "global_env_mutation",
    "intent": "unspecified monkey patch",
    "import_base": "os",
    "is_test": true,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": "# Speed up heartbeats for deterministic SSE activity in tests",
    "context": "    1: os.environ[\"ENABLE_EVENTS\"] = \"1\"\n    2: # Speed up heartbeats for deterministic SSE activity in tests\n    3: os.environ[\"EVENTS_SSE_HEARTBEAT_SEC\"] = \"0.2\"\n    4: os.environ[\"DISABLE_API_AUTH\"] = \"1\"\n    5: os.environ[\"ENABLE_EVENTS_ONESHOT\"] = \"1\"",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "tests/api/test_events_sse.py",
    "line": 18,
    "code": "os.environ[\"DISABLE_API_AUTH\"] = \"1\"",
    "category": "global_env_mutation",
    "intent": "unspecified monkey patch",
    "import_base": "os",
    "is_test": true,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1: # Speed up heartbeats for deterministic SSE activity in tests\n    2: os.environ[\"EVENTS_SSE_HEARTBEAT_SEC\"] = \"0.2\"\n    3: os.environ[\"DISABLE_API_AUTH\"] = \"1\"\n    4: os.environ[\"ENABLE_EVENTS_ONESHOT\"] = \"1\"\n    5: ",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "tests/api/test_events_sse.py",
    "line": 19,
    "code": "os.environ[\"ENABLE_EVENTS_ONESHOT\"] = \"1\"",
    "category": "global_env_mutation",
    "intent": "unspecified monkey patch",
    "import_base": "os",
    "is_test": true,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1: os.environ[\"EVENTS_SSE_HEARTBEAT_SEC\"] = \"0.2\"\n    2: os.environ[\"DISABLE_API_AUTH\"] = \"1\"\n    3: os.environ[\"ENABLE_EVENTS_ONESHOT\"] = \"1\"\n    4: \n    5: from api.server import app",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "api/mission_api.py",
    "line": 29,
    "code": "    health_summary = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "api",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from api import health_summary  # local package import\n    2: except Exception:\n    3:     health_summary = None  # type: ignore\n    4: \n    5: # Try to import mission_controller or provide fallback implementation",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "api/deps.py",
    "line": 37,
    "code": "    _METRICS_AUTH_FAIL_TOTAL = 0",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "api_cache_shared",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from api_cache_shared import METRICS_AUTH_FAIL_TOTAL as _METRICS_AUTH_FAIL_TOTAL  # type: ignore\n    2: except Exception:  # pragma: no cover\n    3:     _METRICS_AUTH_FAIL_TOTAL = 0\n    4: \n    5: ",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "api/cache_impl.py",
    "line": 63,
    "code": "    _reg_register = None  # type: ignore[assignment]",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "api",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     )\n    2: except Exception:  # pragma: no cover - tolerate missing during partial refactor\n    3:     _reg_register = None  # type: ignore[assignment]\n    4:     _reg_set_serving = None  # type: ignore[assignment]\n    5:     _reg_get_serving_for_app = None  # type: ignore[assignment]",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "api/cache_impl.py",
    "line": 64,
    "code": "    _reg_set_serving = None  # type: ignore[assignment]",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "api",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1: except Exception:  # pragma: no cover - tolerate missing during partial refactor\n    2:     _reg_register = None  # type: ignore[assignment]\n    3:     _reg_set_serving = None  # type: ignore[assignment]\n    4:     _reg_get_serving_for_app = None  # type: ignore[assignment]\n    5:     _reg_iter_stack_for = None  # type: ignore[assignment]",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "api/cache_impl.py",
    "line": 65,
    "code": "    _reg_get_serving_for_app = None  # type: ignore[assignment]",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "api",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     _reg_register = None  # type: ignore[assignment]\n    2:     _reg_set_serving = None  # type: ignore[assignment]\n    3:     _reg_get_serving_for_app = None  # type: ignore[assignment]\n    4:     _reg_iter_stack_for = None  # type: ignore[assignment]\n    5: ",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "api/cache_impl.py",
    "line": 66,
    "code": "    _reg_iter_stack_for = None  # type: ignore[assignment]",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "api",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     _reg_set_serving = None  # type: ignore[assignment]\n    2:     _reg_get_serving_for_app = None  # type: ignore[assignment]\n    3:     _reg_iter_stack_for = None  # type: ignore[assignment]\n    4: \n    5: from fastapi import Request",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "api/cache_impl.py",
    "line": 144,
    "code": "    _NEGATIVE_PATHS_SHARED = set(filter(None, os.getenv(\"CACHE_NEGATIVE_PATHS\", \"\").split(\",\")))",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "api",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:             return len(self._backing)\n    2: \n    3:     _NEGATIVE_PATHS_SHARED = set(filter(None, os.getenv(\"CACHE_NEGATIVE_PATHS\", \"\").split(\",\")))\n    4: \n    5:     def _token_suffix(path: str) -> str:",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "api/cache_impl.py",
    "line": 154,
    "code": "    _global_get_lock = None  # type: ignore[assignment]",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "api",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from api.cache.concurrency import get_lock as _global_get_lock  # type: ignore\n    2: except Exception:  # pragma: no cover - tolerate absence\n    3:     _global_get_lock = None  # type: ignore[assignment]\n    4: \n    5: # Small utils for header safety and body buffering",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "api/cache_impl.py",
    "line": 226,
    "code": "    _is_sse_resp = None  # type: ignore[assignment]",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "api",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from api.cache.sse import mark_sse_bypass as _mark_sse  # type: ignore\n    2: except Exception:  # pragma: no cover - tolerate absence\n    3:     _is_sse_resp = None  # type: ignore[assignment]\n    4:     _mark_sse = None  # type: ignore[assignment]\n    5: ",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "api/cache_impl.py",
    "line": 227,
    "code": "    _mark_sse = None  # type: ignore[assignment]",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "api",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1: except Exception:  # pragma: no cover - tolerate absence\n    2:     _is_sse_resp = None  # type: ignore[assignment]\n    3:     _mark_sse = None  # type: ignore[assignment]\n    4: \n    5: # Centralized bypass logic",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "api/cache_impl.py",
    "line": 233,
    "code": "    _should_bypass_central = None  # type: ignore[assignment]",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "api",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from api.cache.bypass import should_bypass as _should_bypass_central  # type: ignore\n    2: except Exception:  # pragma: no cover - tolerate absence during refactor\n    3:     _should_bypass_central = None  # type: ignore[assignment]\n    4: \n    5: # Centralized key building (new module) — optional during refactor",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "api/cache_impl.py",
    "line": 239,
    "code": "    _kb_build_key = None  # type: ignore[assignment]",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "api",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from api.cache.key_builder import build_key as _kb_build_key  # type: ignore\n    2: except Exception:  # pragma: no cover - tolerate absence\n    3:     _kb_build_key = None  # type: ignore[assignment]\n    4: \n    5: try:",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "api/cache_impl.py",
    "line": 246,
    "code": "    _INVALIDATION_TOKENS_SHARED: dict[str, float] = {}",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "api_cache_shared",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     )\n    2: except Exception:  # pragma: no cover - fallback\n    3:     _INVALIDATION_TOKENS_SHARED: dict[str, float] = {}\n    4: \n    5: try:",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "api/cache_impl.py",
    "line": 252,
    "code": "    _CACHE_BYPASS_COUNTS: dict[str, int] = {}",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "api_cache_shared",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from api_cache_shared import BYPASS_COUNTS as _CACHE_BYPASS_COUNTS\n    2: except Exception:  # pragma: no cover - fallback\n    3:     _CACHE_BYPASS_COUNTS: dict[str, int] = {}\n    4: \n    5:     class _CacheShared:  # type: ignore",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "api/cache_impl.py",
    "line": 258,
    "code": "    _cache_shared = _CacheShared()  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "api_cache_shared",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:         SSE_CACHED_TOTAL = 0\n    2: \n    3:     _cache_shared = _CacheShared()  # type: ignore\n    4: \n    5: # Annotation regex for inline TTLs above route functions",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "api/routers/events.py",
    "line": 24,
    "code": "    _cache_shared = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "api_cache_shared",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     import api_cache_shared as _cache_shared  # type: ignore\n    2: except Exception:  # pragma: no cover\n    3:     _cache_shared = None  # type: ignore\n    4: try:\n    5:     # Modular metrics as fallback when shared module isn't available",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "api/routers/events.py",
    "line": 29,
    "code": "    _inc_sse_bypass = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "api",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from api.cache.metrics import inc_sse_bypass as _inc_sse_bypass  # type: ignore\n    2: except Exception:  # pragma: no cover\n    3:     _inc_sse_bypass = None  # type: ignore\n    4: \n    5: router = APIRouter()",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "api/routers/ui.py",
    "line": 73,
    "code": "    _UI_ETAG_304_TOTAL = 0",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "api_cache_shared",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from api_cache_shared import UI_ETAG_304_TOTAL as _UI_ETAG_304_TOTAL  # type: ignore\n    2: except Exception:  # pragma: no cover\n    3:     _UI_ETAG_304_TOTAL = 0\n    4: \n    5: ",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "api/utils/http_cache.py",
    "line": 24,
    "code": "    Request = Any",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "fastapi",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from fastapi import Request\n    2: except Exception:  # pragma: no cover\n    3:     Request = Any\n    4: \n    5: ",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "api/cache/invalidation.py",
    "line": 22,
    "code": "    _TOKENS: dict[str, float] = {}",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "api_cache_shared",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from api_cache_shared import INVALIDATION_TOKENS_SHARED as _TOKENS  # type: ignore\n    2: except Exception:  # pragma: no cover - fallback\n    3:     _TOKENS: dict[str, float] = {}\n    4: \n    5: ",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "api/cache/invalidation.py",
    "line": 107,
    "code": "    _NEGATIVE_PATHS_SHARED: set[str] = set(",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "api_cache_shared",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from api_cache_shared import NEGATIVE_PATHS_SHARED as _NEGATIVE_PATHS_SHARED  # type: ignore\n    2: except Exception:  # pragma: no cover - fallback\n    3:     _NEGATIVE_PATHS_SHARED: set[str] = set(\n    4:         filter(None, os.getenv(\"CACHE_NEGATIVE_PATHS\", \"\").split(\",\"))\n    5:     )",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": ".repo_studios/faulthandler.py",
    "line": 93,
    "code": "      _fcntl = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "fcntl",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:       import fcntl as _fcntl  # POSIX-only\n    2:     except Exception:  # pragma: no cover - non-POSIX\n    3:       _fcntl = None  # type: ignore\n    4: \n    5:     _lock = _threading.Lock()",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": ".repo_studios/dep_hygiene_report.py",
    "line": 24,
    "code": "    tomllib = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "tomllib",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     import tomllib  # Python 3.11+\n    2: except ModuleNotFoundError:  # pragma: no cover\n    3:     tomllib = None  # type: ignore\n    4: \n    5: ",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "agents/core/classic_endpoints.py",
    "line": 45,
    "code": "    psutil = _Ps()  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "psutil",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:             return _Ps._VM()\n    2: \n    3:     psutil = _Ps()  # type: ignore\n    4: \n    5: ",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "agents/core/jarvis_api.py",
    "line": 107,
    "code": "    psutil = _Ps()  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "psutil",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:             return _Ps._VM()\n    2: \n    3:     psutil = _Ps()  # type: ignore\n    4: \n    5: ",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "agents/core/monitoring/resource_monitor.py",
    "line": 54,
    "code": "    psutil = _PsutilShim()  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "psutil",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:             return {}\n    2: \n    3:     psutil = _PsutilShim()  # type: ignore\n    4: \n    5: # Import our GPU monitoring module",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "agents/core/monitoring/exporter.py",
    "line": 33,
    "code": "    HashChainLedger = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "ledger",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from ledger.hash_chain import HashChainLedger  # optional provenance\n    2: except Exception:  # pragma: no cover\n    3:     HashChainLedger = None  # type: ignore\n    4: from .metrics_storage import schema\n    5: ",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "agents/core/monitoring/visualization/__init__.py",
    "line": 48,
    "code": "    DashboardGenerator = None  # type: ignore[assignment]",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "dashboard",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:         _e,\n    2:     )\n    3:     DashboardGenerator = None  # type: ignore[assignment]\n    4:     get_dashboard_generator = None  # type: ignore[assignment]\n    5:     initialize_dashboard_generator = None  # type: ignore[assignment]",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "agents/core/monitoring/visualization/__init__.py",
    "line": 49,
    "code": "    get_dashboard_generator = None  # type: ignore[assignment]",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "dashboard",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     )\n    2:     DashboardGenerator = None  # type: ignore[assignment]\n    3:     get_dashboard_generator = None  # type: ignore[assignment]\n    4:     initialize_dashboard_generator = None  # type: ignore[assignment]\n    5:     _DASHBOARD_AVAILABLE = False",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "agents/core/monitoring/visualization/__init__.py",
    "line": 50,
    "code": "    initialize_dashboard_generator = None  # type: ignore[assignment]",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "dashboard",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     DashboardGenerator = None  # type: ignore[assignment]\n    2:     get_dashboard_generator = None  # type: ignore[assignment]\n    3:     initialize_dashboard_generator = None  # type: ignore[assignment]\n    4:     _DASHBOARD_AVAILABLE = False\n    5: from .error_analytics import (",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "agents/core/monitoring/collectors/default.py",
    "line": 47,
    "code": "    SystemPowerCollector = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "system_power",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from .system_power import SystemPowerCollector  # type: ignore\n    2: except Exception:  # pragma: no cover - optional import failures\n    3:     SystemPowerCollector = None  # type: ignore\n    4: \n    5: __all__ = [",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "agents/core/monitoring/metrics_storage/database_metrics_storage.py",
    "line": 49,
    "code": "    QueryFilters = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "query",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from .query import QueryFilters, QueryResult  # type: ignore\n    2: except Exception:  # pragma: no cover - soft fallback\n    3:     QueryFilters = None  # type: ignore\n    4: \n    5:     class QueryResult:  # type: ignore",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "agents/core/monitoring/metrics_storage/database_metrics_storage.py",
    "line": 70,
    "code": "    add_pagination_by_timestamp = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "storage",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from .storage.db_runtime.query_cache import create_cache\n    2: except Exception:  # pragma: no cover - fallback if runtime not present\n    3:     add_pagination_by_timestamp = None  # type: ignore\n    4:     QueryPerfTracker = None  # type: ignore\n    5:     runtime_analyzer = None  # type: ignore",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "agents/core/monitoring/metrics_storage/database_metrics_storage.py",
    "line": 71,
    "code": "    QueryPerfTracker = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "storage",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1: except Exception:  # pragma: no cover - fallback if runtime not present\n    2:     add_pagination_by_timestamp = None  # type: ignore\n    3:     QueryPerfTracker = None  # type: ignore\n    4:     runtime_analyzer = None  # type: ignore\n    5:     create_cache = None  # type: ignore",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "agents/core/monitoring/metrics_storage/database_metrics_storage.py",
    "line": 72,
    "code": "    runtime_analyzer = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "storage",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     add_pagination_by_timestamp = None  # type: ignore\n    2:     QueryPerfTracker = None  # type: ignore\n    3:     runtime_analyzer = None  # type: ignore\n    4:     create_cache = None  # type: ignore\n    5:     runtime_apply_opts = None  # type: ignore",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "agents/core/monitoring/metrics_storage/database_metrics_storage.py",
    "line": 73,
    "code": "    create_cache = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "storage",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     QueryPerfTracker = None  # type: ignore\n    2:     runtime_analyzer = None  # type: ignore\n    3:     create_cache = None  # type: ignore\n    4:     runtime_apply_opts = None  # type: ignore\n    5: ",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "agents/core/monitoring/metrics_storage/database_metrics_storage.py",
    "line": 74,
    "code": "    runtime_apply_opts = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "storage",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     runtime_analyzer = None  # type: ignore\n    2:     create_cache = None  # type: ignore\n    3:     runtime_apply_opts = None  # type: ignore\n    4: \n    5:     def log_if_slow(*_a, **_k):  # type: ignore",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "agents/core/monitoring/metrics_storage/database_metrics_storage.py",
    "line": 94,
    "code": "        QueryBuilder = None",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "db_storage",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:         QUERY_BUILDER_AVAILABLE = True\n    2:     except ImportError:\n    3:         QueryBuilder = None\n    4:         QUERY_BUILDER_AVAILABLE = False\n    5: except ImportError:",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "agents/core/monitoring/metrics_storage/database_metrics_storage.py",
    "line": 100,
    "code": "    BaseDatabaseStorage = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "db_storage",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:         \"Could not import modular database components. Falling back to legacy implementation.\"\n    2:     )\n    3:     BaseDatabaseStorage = None  # type: ignore\n    4:     TimeSeriesDatabaseMixin = None  # type: ignore\n    5:     ModelMetricsDatabaseMixin = None  # type: ignore",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "agents/core/monitoring/metrics_storage/database_metrics_storage.py",
    "line": 101,
    "code": "    TimeSeriesDatabaseMixin = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "db_storage",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     )\n    2:     BaseDatabaseStorage = None  # type: ignore\n    3:     TimeSeriesDatabaseMixin = None  # type: ignore\n    4:     ModelMetricsDatabaseMixin = None  # type: ignore\n    5:     ResourceMetricsDatabaseMixin = None  # type: ignore",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "agents/core/monitoring/metrics_storage/database_metrics_storage.py",
    "line": 102,
    "code": "    ModelMetricsDatabaseMixin = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "db_storage",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     BaseDatabaseStorage = None  # type: ignore\n    2:     TimeSeriesDatabaseMixin = None  # type: ignore\n    3:     ModelMetricsDatabaseMixin = None  # type: ignore\n    4:     ResourceMetricsDatabaseMixin = None  # type: ignore\n    5:     ErrorMetricsDatabaseMixin = None  # type: ignore",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "agents/core/monitoring/metrics_storage/database_metrics_storage.py",
    "line": 103,
    "code": "    ResourceMetricsDatabaseMixin = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "db_storage",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     TimeSeriesDatabaseMixin = None  # type: ignore\n    2:     ModelMetricsDatabaseMixin = None  # type: ignore\n    3:     ResourceMetricsDatabaseMixin = None  # type: ignore\n    4:     ErrorMetricsDatabaseMixin = None  # type: ignore\n    5:     QueryBuilder = None  # type: ignore",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "agents/core/monitoring/metrics_storage/database_metrics_storage.py",
    "line": 104,
    "code": "    ErrorMetricsDatabaseMixin = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "db_storage",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     ModelMetricsDatabaseMixin = None  # type: ignore\n    2:     ResourceMetricsDatabaseMixin = None  # type: ignore\n    3:     ErrorMetricsDatabaseMixin = None  # type: ignore\n    4:     QueryBuilder = None  # type: ignore\n    5:     QUERY_BUILDER_AVAILABLE = False",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "agents/core/monitoring/metrics_storage/database_metrics_storage.py",
    "line": 105,
    "code": "    QueryBuilder = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "db_storage",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     ResourceMetricsDatabaseMixin = None  # type: ignore\n    2:     ErrorMetricsDatabaseMixin = None  # type: ignore\n    3:     QueryBuilder = None  # type: ignore\n    4:     QUERY_BUILDER_AVAILABLE = False\n    5: ",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "agents/core/monitoring/metrics_storage/base.py",
    "line": 1122,
    "code": "    TimeSeriesPoint = TimeSeries = TimeSeriesCollection = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "time_series",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": "# Defer failures – keep base usable even if time series stack broken",
    "context": "    1: except Exception:  # pragma: no cover\n    2:     # Defer failures – keep base usable even if time series stack broken\n    3:     TimeSeriesPoint = TimeSeries = TimeSeriesCollection = None  # type: ignore\n    4: \n    5: __all__ = [",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "agents/core/monitoring/metrics_storage/base.py",
    "line": 1122,
    "code": "    TimeSeriesPoint = TimeSeries = TimeSeriesCollection = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "time_series",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": "# Defer failures – keep base usable even if time series stack broken",
    "context": "    1: except Exception:  # pragma: no cover\n    2:     # Defer failures – keep base usable even if time series stack broken\n    3:     TimeSeriesPoint = TimeSeries = TimeSeriesCollection = None  # type: ignore\n    4: \n    5: __all__ = [",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "agents/core/monitoring/metrics_storage/base.py",
    "line": 1122,
    "code": "    TimeSeriesPoint = TimeSeries = TimeSeriesCollection = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "time_series",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": "# Defer failures – keep base usable even if time series stack broken",
    "context": "    1: except Exception:  # pragma: no cover\n    2:     # Defer failures – keep base usable even if time series stack broken\n    3:     TimeSeriesPoint = TimeSeries = TimeSeriesCollection = None  # type: ignore\n    4: \n    5: __all__ = [",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "agents/core/monitoring/metrics_storage/__init__.py",
    "line": 23,
    "code": "    MetricType = StorageOperation = TimeGranularity = StorageFormat = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "constants",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     )\n    2: except Exception:\n    3:     MetricType = StorageOperation = TimeGranularity = StorageFormat = None  # type: ignore\n    4: \n    5: # Provide backward compatible MetricsStorage symbol by aliasing the primary",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "agents/core/monitoring/metrics_storage/__init__.py",
    "line": 23,
    "code": "    MetricType = StorageOperation = TimeGranularity = StorageFormat = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "constants",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     )\n    2: except Exception:\n    3:     MetricType = StorageOperation = TimeGranularity = StorageFormat = None  # type: ignore\n    4: \n    5: # Provide backward compatible MetricsStorage symbol by aliasing the primary",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "agents/core/monitoring/metrics_storage/__init__.py",
    "line": 23,
    "code": "    MetricType = StorageOperation = TimeGranularity = StorageFormat = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "constants",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     )\n    2: except Exception:\n    3:     MetricType = StorageOperation = TimeGranularity = StorageFormat = None  # type: ignore\n    4: \n    5: # Provide backward compatible MetricsStorage symbol by aliasing the primary",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "agents/core/monitoring/metrics_storage/__init__.py",
    "line": 23,
    "code": "    MetricType = StorageOperation = TimeGranularity = StorageFormat = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "constants",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     )\n    2: except Exception:\n    3:     MetricType = StorageOperation = TimeGranularity = StorageFormat = None  # type: ignore\n    4: \n    5: # Provide backward compatible MetricsStorage symbol by aliasing the primary",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "agents/core/monitoring/metrics_storage/backup/system_snapshots.py",
    "line": 35,
    "code": "    BackupStorage = Any  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "storage",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from .storage import BackupStorage, BackupStrategy  # type: ignore\n    2: except Exception:  # pragma: no cover\n    3:     BackupStorage = Any  # type: ignore\n    4: \n    5:     class BackupStrategy:  # type: ignore",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "agents/core/monitoring/metrics_storage/backup/system_snapshots.py",
    "line": 44,
    "code": "    HashChainLedger = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "ledger",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from .......ledger.hash_chain import LEDGER_FILENAME, HashChainLedger  # type: ignore\n    2: except Exception:  # pragma: no cover\n    3:     HashChainLedger = None  # type: ignore\n    4:     LEDGER_FILENAME = \"ledger.log\"  # type: ignore\n    5: ",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "agents/core/monitoring/metrics_storage/backup/system_snapshots.py",
    "line": 45,
    "code": "    LEDGER_FILENAME = \"ledger.log\"  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "ledger",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1: except Exception:  # pragma: no cover\n    2:     HashChainLedger = None  # type: ignore\n    3:     LEDGER_FILENAME = \"ledger.log\"  # type: ignore\n    4: \n    5: ISO = \"%Y-%m-%dT%H:%M:%S.%fZ\"",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "agents/core/monitoring/metrics_storage/backup/system_snapshots.py",
    "line": 294,
    "code": "    BackupSchedule = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "operations_mod",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from .operations_mod.schedule import BackupSchedule, add_backup_schedule\n    2: except Exception:  # pragma: no cover\n    3:     BackupSchedule = None  # type: ignore\n    4:     add_backup_schedule = None  # type: ignore\n    5:     BackupFrequency = None  # type: ignore",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "agents/core/monitoring/metrics_storage/backup/system_snapshots.py",
    "line": 295,
    "code": "    add_backup_schedule = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "operations_mod",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1: except Exception:  # pragma: no cover\n    2:     BackupSchedule = None  # type: ignore\n    3:     add_backup_schedule = None  # type: ignore\n    4:     BackupFrequency = None  # type: ignore\n    5: ",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "agents/core/monitoring/metrics_storage/backup/system_snapshots.py",
    "line": 296,
    "code": "    BackupFrequency = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "operations_mod",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     BackupSchedule = None  # type: ignore\n    2:     add_backup_schedule = None  # type: ignore\n    3:     BackupFrequency = None  # type: ignore\n    4: \n    5: _FREQ_MAP = {",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "agents/core/monitoring/metrics_storage/backup/operations_mod/core.py",
    "line": 15,
    "code": "    BackupStorage = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "storage",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from ..storage import BackupStorage  # type: ignore\n    2: except Exception:  # pragma: no cover\n    3:     BackupStorage = None  # type: ignore\n    4: \n    5: ",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "agents/core/monitoring/metrics_storage/backup/operations_mod/__init__.py",
    "line": 31,
    "code": "    BackupStorage = object  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "storage",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from ..storage import BackupStorage, BackupStrategy  # type: ignore\n    2: except Exception:  # pragma: no cover\n    3:     BackupStorage = object  # type: ignore\n    4: \n    5:     class BackupStrategy:  # minimal fallback",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "agents/core/monitoring/metrics_storage/backup/restore_mod/manager.py",
    "line": 19,
    "code": "    BackupStorage = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "storage",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from ..storage import BackupStorage  # type: ignore\n    2: except Exception:  # pragma: no cover\n    3:     BackupStorage = None  # type: ignore\n    4: \n    5: ",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "agents/core/monitoring/metrics_storage/tests/backup/test_system_snapshot_schedule.py",
    "line": 16,
    "code": "    HashChainLedger = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "ledger",
    "is_test": true,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from ledger.hash_chain import HashChainLedger\n    2: except Exception:  # pragma: no cover\n    3:     HashChainLedger = None  # type: ignore\n    4: \n    5: ",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "agents/core/monitoring/metrics_storage/tests/backup/test_step_a_matrix.py",
    "line": 17,
    "code": "    BackupStorage = object  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "backup",
    "is_test": true,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from ...backup.storage import BackupStorage, BackupStrategy\n    2: except Exception:  # pragma: no cover\n    3:     BackupStorage = object  # type: ignore\n    4: \n    5:     class BackupStrategy:  # type: ignore",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "agents/core/monitoring/metrics_storage/tests/backup/test_step_a_matrix.py",
    "line": 26,
    "code": "    BackupOperations = object  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "backup",
    "is_test": true,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from ...backup.operations import BackupOperations\n    2: except Exception:  # pragma: no cover\n    3:     BackupOperations = object  # type: ignore\n    4: \n    5: try:  # verification",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "agents/core/monitoring/metrics_storage/tests/backup/test_step_a_matrix.py",
    "line": 31,
    "code": "    BackupVerifier = object  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "backup",
    "is_test": true,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from ...backup.verification import BackupStatus, BackupVerifier\n    2: except Exception:  # pragma: no cover\n    3:     BackupVerifier = object  # type: ignore\n    4: \n    5:     class BackupStatus:  # type: ignore",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "agents/core/monitoring/metrics_storage/tests/backup/test_step_a_matrix.py",
    "line": 40,
    "code": "    RestoreManager = object  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "backup",
    "is_test": true,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from ...backup.restore import RestoreManager, RestoreMode\n    2: except Exception:  # pragma: no cover\n    3:     RestoreManager = object  # type: ignore\n    4: \n    5:     class RestoreMode:  # type: ignore",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "agents/core/monitoring/metrics_storage/tests/backup/test_cli_run_due.py",
    "line": 13,
    "code": "    HashChainLedger = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "ledger",
    "is_test": true,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from ledger.hash_chain import HashChainLedger\n    2: except Exception:  # pragma: no cover\n    3:     HashChainLedger = None  # type: ignore\n    4: \n    5: from agents.core.monitoring.metrics_storage.cli import backup_commands as cli_mod",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "agents/core/monitoring/metrics_storage/storage/hybrid_storage/backend.py",
    "line": 29,
    "code": "    _orig_get_database_storage = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "db_storage",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from ..file_storage import get_file_storage as _orig_get_file_storage\n    2: except Exception:  # pragma: no cover\n    3:     _orig_get_database_storage = None  # type: ignore\n    4:     _orig_get_file_storage = None  # type: ignore\n    5: ",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "agents/core/monitoring/metrics_storage/storage/hybrid_storage/backend.py",
    "line": 30,
    "code": "    _orig_get_file_storage = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "file_storage",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1: except Exception:  # pragma: no cover\n    2:     _orig_get_database_storage = None  # type: ignore\n    3:     _orig_get_file_storage = None  # type: ignore\n    4: \n    5: ",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "agents/core/monitoring/metrics_storage/cli/backup_commands.py",
    "line": 36,
    "code": "    create_system_snapshots = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "backup",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     )\n    2: except Exception:  # pragma: no cover\n    3:     create_system_snapshots = None  # type: ignore\n    4:     restore_metrics_db = None  # type: ignore\n    5:     restore_ledger = None  # type: ignore",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "agents/core/monitoring/metrics_storage/cli/backup_commands.py",
    "line": 37,
    "code": "    restore_metrics_db = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "backup",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1: except Exception:  # pragma: no cover\n    2:     create_system_snapshots = None  # type: ignore\n    3:     restore_metrics_db = None  # type: ignore\n    4:     restore_ledger = None  # type: ignore\n    5:     schedule_system_snapshots = None  # type: ignore",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "agents/core/monitoring/metrics_storage/cli/backup_commands.py",
    "line": 38,
    "code": "    restore_ledger = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "backup",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     create_system_snapshots = None  # type: ignore\n    2:     restore_metrics_db = None  # type: ignore\n    3:     restore_ledger = None  # type: ignore\n    4:     schedule_system_snapshots = None  # type: ignore\n    5: ",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "agents/core/monitoring/metrics_storage/cli/backup_commands.py",
    "line": 39,
    "code": "    schedule_system_snapshots = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "backup",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     restore_metrics_db = None  # type: ignore\n    2:     restore_ledger = None  # type: ignore\n    3:     schedule_system_snapshots = None  # type: ignore\n    4: \n    5: try:",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "agents/core/monitoring/metrics_storage/cli/backup_commands.py",
    "line": 44,
    "code": "    HashChainLedger = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "ledger",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from ledger.hash_chain import HashChainLedger  # for validating ledger root exists\n    2: except Exception:  # pragma: no cover\n    3:     HashChainLedger = None  # type: ignore\n    4: \n    5: logger = logging.getLogger(\"metrics_storage.cli.backup_commands\")",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "agents/core/monitoring/metrics_storage/retention/scheduler.py",
    "line": 36,
    "code": "JobBase = None",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "jobs",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": "# Forward import to avoid circular dependency\n# Will be imported when needed",
    "context": "    1: # Forward import to avoid circular dependency\n    2: # Will be imported when needed\n    3: JobBase = None\n    4: \n    5: logger = logging.getLogger(\"metrics_storage.retention.scheduler\")",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "agents/interface/chainlit/widgets.py",
    "line": 42,
    "code": "    cl = _StubCL()  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "chainlit",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:             )\n    2: \n    3:     cl = _StubCL()  # type: ignore\n    4: \n    5: from .api_client import JarvisApiClient",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "agents/interface/chainlit/widget_helpers.py",
    "line": 39,
    "code": "    cl = _StubCL()  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "chainlit",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:             raise AttributeError(name)\n    2: \n    3:     cl = _StubCL()  # type: ignore\n    4: \n    5: from .api_client import JarvisApiClient",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "agents/interface/chainlit/widget_helpers.py",
    "line": 50,
    "code": "    _metrics_mod = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "widgets",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from .widgets import metrics as _metrics_mod\n    2: except Exception:  # pragma: no cover\n    3:     _metrics_mod = None  # type: ignore\n    4: \n    5: ",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "agents/interface/chainlit/ws_client.py",
    "line": 26,
    "code": "    websockets = None  # will be monkeypatched in tests or resolved at runtime",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "websockets",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     import websockets  # type: ignore\n    2: except Exception:  # pragma: no cover\n    3:     websockets = None  # will be monkeypatched in tests or resolved at runtime\n    4: \n    5: from .config import Config",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "agents/interface/chainlit/tests/conftest.py",
    "line": 88,
    "code": "sys.modules[\"chainlit\"] = cl",
    "category": "sys_modules_assignment",
    "intent": "module injection/aliasing",
    "import_base": "sys",
    "is_test": true,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1: cl.Action = _Action  # type: ignore\n    2: \n    3: sys.modules[\"chainlit\"] = cl\n    4: \n    5: ",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "scripts/dep_hygiene_report.py",
    "line": 25,
    "code": "    tomllib = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "tomllib",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     import tomllib  # Python 3.11+\n    2: except ModuleNotFoundError:  # pragma: no cover\n    3:     tomllib = None  # type: ignore\n    4: \n    5: ",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "scripts/memory_review.py",
    "line": 10,
    "code": "os.environ[\"CUDA_VISIBLE_DEVICES\"] = \"\"",
    "category": "global_env_mutation",
    "intent": "unspecified monkey patch",
    "import_base": "os",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": "# Force CPU mode by setting environment variables before importing torch",
    "context": "    1: \n    2: # Force CPU mode by setting environment variables before importing torch\n    3: os.environ[\"CUDA_VISIBLE_DEVICES\"] = \"\"\n    4: os.environ[\"TORCH_DEVICE\"] = \"cpu\"\n    5: ",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "scripts/memory_review.py",
    "line": 11,
    "code": "os.environ[\"TORCH_DEVICE\"] = \"cpu\"",
    "category": "global_env_mutation",
    "intent": "unspecified monkey patch",
    "import_base": "os",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1: # Force CPU mode by setting environment variables before importing torch\n    2: os.environ[\"CUDA_VISIBLE_DEVICES\"] = \"\"\n    3: os.environ[\"TORCH_DEVICE\"] = \"cpu\"\n    4: \n    5: # Add path for voice engine",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "scripts/maintenance_orchestrator.py",
    "line": 54,
    "code": "        CronTrigger = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "apscheduler",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:         from apscheduler.triggers.cron import CronTrigger\n    2:     except Exception:  # pragma: no cover - cron optional\n    3:         CronTrigger = None  # type: ignore\n    4: except Exception:  # pragma: no cover - scheduler optional\n    5:     BackgroundScheduler = None  # type: ignore",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "scripts/maintenance_orchestrator.py",
    "line": 56,
    "code": "    BackgroundScheduler = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "apscheduler",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:         CronTrigger = None  # type: ignore\n    2: except Exception:  # pragma: no cover - scheduler optional\n    3:     BackgroundScheduler = None  # type: ignore\n    4:     IntervalTrigger = None  # type: ignore\n    5:     CronTrigger = None  # type: ignore",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "scripts/maintenance_orchestrator.py",
    "line": 57,
    "code": "    IntervalTrigger = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "apscheduler",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1: except Exception:  # pragma: no cover - scheduler optional\n    2:     BackgroundScheduler = None  # type: ignore\n    3:     IntervalTrigger = None  # type: ignore\n    4:     CronTrigger = None  # type: ignore\n    5: ",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "scripts/maintenance_orchestrator.py",
    "line": 58,
    "code": "    CronTrigger = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "apscheduler",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     BackgroundScheduler = None  # type: ignore\n    2:     IntervalTrigger = None  # type: ignore\n    3:     CronTrigger = None  # type: ignore\n    4: \n    5: ",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "mrp/memory_lookup.py",
    "line": 12,
    "code": "os.environ[\"CUDA_VISIBLE_DEVICES\"] = \"\"",
    "category": "global_env_mutation",
    "intent": "unspecified monkey patch",
    "import_base": "os",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": "# Force CPU mode by setting environment variables before other imports",
    "context": "    1: \n    2: # Force CPU mode by setting environment variables before other imports\n    3: os.environ[\"CUDA_VISIBLE_DEVICES\"] = \"\"\n    4: os.environ[\"TORCH_DEVICE\"] = \"cpu\"\n    5: ",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "mrp/memory_lookup.py",
    "line": 13,
    "code": "os.environ[\"TORCH_DEVICE\"] = \"cpu\"",
    "category": "global_env_mutation",
    "intent": "unspecified monkey patch",
    "import_base": "os",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1: # Force CPU mode by setting environment variables before other imports\n    2: os.environ[\"CUDA_VISIBLE_DEVICES\"] = \"\"\n    3: os.environ[\"TORCH_DEVICE\"] = \"cpu\"\n    4: \n    5: # === CONFIGURATION ===",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "src/vision/gallery/others/plot_scripted_tensor_transforms.py",
    "line": 31,
    "code": "sys.path += [\"../transforms\"]",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "sys",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1: import sys\n    2: \n    3: sys.path += [\"../transforms\"]\n    4: from helpers import plot\n    5: ",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "src/vision/gallery/others/plot_scripted_tensor_transforms.py",
    "line": 31,
    "code": "sys.path += [\"../transforms\"]",
    "category": "import_time_side_effect",
    "intent": "import-time behavior override",
    "import_base": "sys",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1: import sys\n    2: \n    3: sys.path += [\"../transforms\"]\n    4: from helpers import plot\n    5: ",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "src/vision/test/test_transforms_video.py",
    "line": 13,
    "code": "    stats = None",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "scipy",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from scipy import stats\n    2: except ImportError:\n    3:     stats = None\n    4: \n    5: ",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "src/vision/test/test_image.py",
    "line": 47,
    "code": "PILLOW_VERSION = tuple(int(x) for x in PILLOW_VERSION.split(\".\"))",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "PIL",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1: IS_MACOS = sys.platform == \"darwin\"\n    2: IS_LINUX = sys.platform == \"linux\"\n    3: PILLOW_VERSION = tuple(int(x) for x in PILLOW_VERSION.split(\".\"))\n    4: WEBP_TEST_IMAGES_DIR = os.environ.get(\"WEBP_TEST_IMAGES_DIR\", \"\")\n    5: # See https://github.com/pytorch/vision/pull/8724#issuecomment-2503964558",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "src/vision/test/test_utils.py",
    "line": 17,
    "code": "PILLOW_VERSION = tuple(int(x) for x in PILLOW_VERSION.split(\".\"))",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "PIL",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1: from torchvision.transforms.v2.functional import to_dtype\n    2: \n    3: PILLOW_VERSION = tuple(int(x) for x in PILLOW_VERSION.split(\".\"))\n    4: \n    5: boxes = torch.tensor([[0, 0, 20, 20], [0, 0, 0, 0], [10, 15, 30, 35], [23, 35, 93, 95]], dtype=torch.float)",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "src/vision/test/test_io.py",
    "line": 18,
    "code": "    av = None",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "av",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     io.video._check_av_available()\n    2: except ImportError:\n    3:     av = None\n    4: \n    5: ",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "src/vision/test/test_videoapi.py",
    "line": 24,
    "code": "    av = None",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "av",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     torchvision.io.video._check_av_available()\n    2: except ImportError:\n    3:     av = None\n    4: \n    5: ",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "src/vision/test/test_video_reader.py",
    "line": 22,
    "code": "    av = None",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "av",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     io.video._check_av_available()\n    2: except ImportError:\n    3:     av = None\n    4: \n    5: ",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "src/vision/test/test_transforms.py",
    "line": 21,
    "code": "    accimage = None",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "accimage",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     import accimage\n    2: except ImportError:\n    3:     accimage = None\n    4: \n    5: try:",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "src/vision/test/test_transforms.py",
    "line": 26,
    "code": "    stats = None",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "scipy",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from scipy import stats\n    2: except ImportError:\n    3:     stats = None\n    4: \n    5: from common_utils import assert_equal, cycle_over, float_dtypes, int_dtypes",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "src/vision/test/test_datasets_download.py",
    "line": 45,
    "code": "urlopen = limit_requests_per_time()(urlopen)",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "urllib",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1: \n    2: \n    3: urlopen = limit_requests_per_time()(urlopen)\n    4: \n    5: ",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "src/vision/test/test_datasets_download.py",
    "line": 76,
    "code": "urlopen = resolve_redirects()(urlopen)",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "urllib",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1: \n    2: \n    3: urlopen = resolve_redirects()(urlopen)\n    4: \n    5: ",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "src/vision/test/test_video_gpu_decoder.py",
    "line": 12,
    "code": "    av = None",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "av",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     import av\n    2: except ImportError:\n    3:     av = None\n    4: \n    5: VIDEO_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"assets\", \"videos\")",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "src/vision/docs/source/conf.py",
    "line": 65,
    "code": "gen_rst.EXAMPLE_HEADER = \"\"\"",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "sphinx_gallery",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1: from sphinx_gallery import gen_rst\n    2: \n    3: gen_rst.EXAMPLE_HEADER = \"\"\"\n    4: .. DO NOT EDIT.\n    5: .. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "src/vision/docs/source/conf.py",
    "line": 65,
    "code": "gen_rst.EXAMPLE_HEADER = \"\"\"",
    "category": "import_time_side_effect",
    "intent": "import-time behavior override",
    "import_base": "sphinx_gallery",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1: from sphinx_gallery import gen_rst\n    2: \n    3: gen_rst.EXAMPLE_HEADER = \"\"\"\n    4: .. DO NOT EDIT.\n    5: .. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "src/vision/docs/source/conf.py",
    "line": 328,
    "code": "TypedField.make_field = patched_make_field",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "sphinx",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1: \n    2: \n    3: TypedField.make_field = patched_make_field\n    4: \n    5: ",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "src/vision/torchvision/transforms/_functional_pil.py",
    "line": 14,
    "code": "    accimage = None",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "accimage",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     import accimage\n    2: except ImportError:\n    3:     accimage = None\n    4: \n    5: ",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "src/vision/torchvision/transforms/transforms.py",
    "line": 13,
    "code": "    accimage = None",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "accimage",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     import accimage\n    2: except ImportError:\n    3:     accimage = None\n    4: \n    5: from ..utils import _log_api_usage_once",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "src/vision/torchvision/transforms/functional.py",
    "line": 17,
    "code": "    accimage = None",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "accimage",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     import accimage\n    2: except ImportError:\n    3:     accimage = None\n    4: \n    5: from ..utils import _Image_fromarray, _log_api_usage_once",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "src/vision/torchvision/io/__init__.py",
    "line": 4,
    "code": "    _HAS_GPU_VIDEO_DECODER = False",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "_load_gpu_decoder",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from ._load_gpu_decoder import _HAS_GPU_VIDEO_DECODER\n    2: except ModuleNotFoundError:\n    3:     _HAS_GPU_VIDEO_DECODER = False\n    4: \n    5: from ._video_opt import (",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "src/vision/torchvision/io/video.py",
    "line": 21,
    "code": "        av = ImportError(",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "av",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     av.logging.set_level(av.logging.ERROR)\n    2:     if not hasattr(av.video.frame.VideoFrame, \"pict_type\"):\n    3:         av = ImportError(\n    4:             \"\"\"\\\n    5: Your version of PyAV is too old for the necessary video operations in torchvision.",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "src/vision/torchvision/io/video.py",
    "line": 35,
    "code": "    av = ImportError(",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "av",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:         FFmpegError = av.AVError\n    2: except ImportError:\n    3:     av = ImportError(\n    4:         \"\"\"\\\n    5: PyAV is not installed, and is necessary for the video operations in torchvision.",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "src/vision/torchvision/io/video_reader.py",
    "line": 28,
    "code": "        av = ImportError(",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "av",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     av.logging.set_level(av.logging.ERROR)\n    2:     if not hasattr(av.video.frame.VideoFrame, \"pict_type\"):\n    3:         av = ImportError(\n    4:             \"\"\"\\\n    5: Your version of PyAV is too old for the necessary video operations in torchvision.",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "src/vision/torchvision/io/video_reader.py",
    "line": 38,
    "code": "    av = ImportError(",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "av",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:         )\n    2: except ImportError:\n    3:     av = ImportError(\n    4:         \"\"\"\\\n    5: PyAV is not installed, and is necessary for the video operations in torchvision.",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "src/vision/.github/scripts/run-clang-format.py",
    "line": 48,
    "code": "    DEVNULL = open(os.devnull, \"wb\")",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "subprocess",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from subprocess import DEVNULL  # py3k\n    2: except ImportError:\n    3:     DEVNULL = open(os.devnull, \"wb\")\n    4: \n    5: ",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "src/audio/docs/source/conf.py",
    "line": 364,
    "code": "TypedField.make_field = patched_make_field",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "sphinx",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1: \n    2: \n    3: TypedField.make_field = patched_make_field\n    4: \n    5: ",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "src/audio/src/torchaudio/models/decoder/_ctc_decoder.py",
    "line": 57,
    "code": "        _KenLM = None",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "flashlight",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:         from flashlight.lib.text.decoder import KenLM as _KenLM\n    2:     except Exception:\n    3:         _KenLM = None\n    4: \n    5: __all__ = [",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  }
]