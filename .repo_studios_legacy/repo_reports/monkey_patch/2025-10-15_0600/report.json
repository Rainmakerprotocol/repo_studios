[
  {
    "file": "tmp_debug_staleness.py",
    "line": 18,
    "code": "os.environ[\"ENABLE_A1\"] = \"1\"",
    "category": "global_env_mutation",
    "intent": "unspecified monkey patch",
    "import_base": "os",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": "# set env",
    "context": "    1: \n    2: # set env\n    3: os.environ[\"ENABLE_A1\"] = \"1\"\n    4: os.environ.pop(\"ENABLE_A2\", None)\n    5: os.environ[\"AGENTS_REGISTRY_PATH\"] = str(reg)",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "tmp_debug_staleness.py",
    "line": 20,
    "code": "os.environ[\"AGENTS_REGISTRY_PATH\"] = str(reg)",
    "category": "global_env_mutation",
    "intent": "unspecified monkey patch",
    "import_base": "os",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1: os.environ[\"ENABLE_A1\"] = \"1\"\n    2: os.environ.pop(\"ENABLE_A2\", None)\n    3: os.environ[\"AGENTS_REGISTRY_PATH\"] = str(reg)\n    4: \n    5: lines = build_orchestrator_metrics_lines(lambda: None)",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "conftest.py",
    "line": 31,
    "code": "    _sig = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "signal",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     import signal as _sig\n    2: except Exception:  # pragma: no cover - platform dependent\n    3:     _sig = None  # type: ignore\n    4: \n    5: # Make repo root and tests dir importable before plugin registration.",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "conftest.py",
    "line": 36,
    "code": "os.environ.setdefault(\"PYTHONDONTWRITEBYTECODE\", \"1\")",
    "category": "global_env_mutation",
    "intent": "unspecified monkey patch",
    "import_base": "os",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": "# Make repo root and tests dir importable before plugin registration.\n# Disable bytecode generation to prevent stale .pyc causing phantom line errors between\n# iterative agent schema refactors across multiple Python versions in CI.",
    "context": "    1: # Disable bytecode generation to prevent stale .pyc causing phantom line errors between\n    2: # iterative agent schema refactors across multiple Python versions in CI.\n    3: os.environ.setdefault(\"PYTHONDONTWRITEBYTECODE\", \"1\")\n    4: try:\n    5:     sys.dont_write_bytecode = True  # type: ignore[attr-defined]",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "conftest.py",
    "line": 38,
    "code": "    sys.dont_write_bytecode = True  # type: ignore[attr-defined]",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "sys",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1: os.environ.setdefault(\"PYTHONDONTWRITEBYTECODE\", \"1\")\n    2: try:\n    3:     sys.dont_write_bytecode = True  # type: ignore[attr-defined]\n    4: except Exception:  # pragma: no cover\n    5:     pass",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "conftest.py",
    "line": 76,
    "code": "    _faulthandler = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "faulthandler",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     import signal as _signal\n    2: except Exception:\n    3:     _faulthandler = None  # type: ignore\n    4: \n    5: # Periodic persistence is normalized off via the autouse env fixture below; avoid",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "conftest.py",
    "line": 433,
    "code": "            sys.modules[ALIAS_NAME] = sys.modules.get(\"agents\")",
    "category": "sys_modules_assignment",
    "intent": "module injection/aliasing",
    "import_base": "sys",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": "# Reuse the existing 'agents' module object to ensure patches applied via either\n# import path affect the single shared module (avoids divergent singletons).",
    "context": "    1:             # Reuse the existing 'agents' module object to ensure patches applied via either\n    2:             # import path affect the single shared module (avoids divergent singletons).\n    3:             sys.modules[ALIAS_NAME] = sys.modules.get(\"agents\")\n    4:         # Also alias the core subpackage explicitly so 'from jarvis2.agents.core import ...'\n    5:         # and 'import agents.core.something' both resolve to the same module hierarchy.",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "conftest.py",
    "line": 837,
    "code": "            _as_sel_events.BaseSelectorEventLoop._close_self_pipe = _patched_close_self_pipe  # type: ignore[attr-defined]",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "asyncio",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     if _ORIG_CLOSE_SELF_PIPE is not None:\n    2:         try:\n    3:             _as_sel_events.BaseSelectorEventLoop._close_self_pipe = _patched_close_self_pipe  # type: ignore[attr-defined]\n    4:         except Exception:\n    5:             pass",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "conftest.py",
    "line": 842,
    "code": "            _as_sel_events.SelectorEventLoop._close_self_pipe = _patched_close_self_pipe  # type: ignore[attr-defined]",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "asyncio",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     if _ORIG_SEL_CLOSE_SELF_PIPE is not None:\n    2:         try:\n    3:             _as_sel_events.SelectorEventLoop._close_self_pipe = _patched_close_self_pipe  # type: ignore[attr-defined]\n    4:         except Exception:\n    5:             pass",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "conftest.py",
    "line": 859,
    "code": "            _as_sel_events.BaseSelectorEventLoop.close = _patched_bsel_close  # type: ignore[assignment]",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "asyncio",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:                     raise\n    2: \n    3:             _as_sel_events.BaseSelectorEventLoop.close = _patched_bsel_close  # type: ignore[assignment]\n    4:         except Exception:\n    5:             pass",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "conftest.py",
    "line": 876,
    "code": "            _as_runners.Runner.close = _patched_runner_close  # type: ignore[assignment]",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "asyncio",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:                     raise\n    2: \n    3:             _as_runners.Runner.close = _patched_runner_close  # type: ignore[assignment]\n    4:         except Exception:\n    5:             pass",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "conftest.py",
    "line": 894,
    "code": "            _socket.socket.close = _patched_sock_close  # type: ignore[assignment]",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "socket",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:                     raise\n    2: \n    3:             _socket.socket.close = _patched_sock_close  # type: ignore[assignment]\n    4:     except Exception:\n    5:         pass",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "conftest.py",
    "line": 938,
    "code": "    PytestRemovedIn9Warning = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "_pytest",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from _pytest.warning_types import PytestRemovedIn9Warning  # type: ignore\n    2: except Exception:  # pragma: no cover - older/newer pytest internals may differ\n    3:     PytestRemovedIn9Warning = None  # type: ignore\n    4: \n    5: if PytestRemovedIn9Warning is not None:",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "api/deps.py",
    "line": 41,
    "code": "    _METRICS_AUTH_FAIL_TOTAL = 0",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "api_cache_shared",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from api_cache_shared import METRICS_AUTH_FAIL_TOTAL as _METRICS_AUTH_FAIL_TOTAL  # type: ignore\n    2: except Exception:  # pragma: no cover\n    3:     _METRICS_AUTH_FAIL_TOTAL = 0\n    4: \n    5: ",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "api/cache_impl.py",
    "line": 127,
    "code": "    _modern_get_cache_stats = None  # type: ignore[assignment]",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "api",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from api.cache.stats import get_cache_stats as _modern_get_cache_stats  # type: ignore\n    2: except Exception:  # pragma: no cover - tolerate absence\n    3:     _modern_get_cache_stats = None  # type: ignore[assignment]\n    4: \n    5: ",
    "git_author": "Rainmakerprotocol",
    "git_commit": "243bf3e46851ef386c4c932c28528eba65ed0b81",
    "git_commit_date": "2025-10-09T10:13:02+00:00"
  },
  {
    "file": "api/cache_impl.py",
    "line": 136,
    "code": "        Request = Any  # type: ignore[assignment]",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "starlette",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:         from starlette.requests import Request  # type: ignore\n    2:     except Exception:  # pragma: no cover - final fallback\n    3:         Request = Any  # type: ignore[assignment]\n    4: \n    5: ",
    "git_author": "Rainmakerprotocol",
    "git_commit": "243bf3e46851ef386c4c932c28528eba65ed0b81",
    "git_commit_date": "2025-10-09T10:13:02+00:00"
  },
  {
    "file": "api/cache_impl.py",
    "line": 171,
    "code": "    BaseHTTPMiddleware = object  # type: ignore[assignment]",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "starlette",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     )\n    2: except Exception:  # pragma: no cover - minimal fallback for tests\n    3:     BaseHTTPMiddleware = object  # type: ignore[assignment]\n    4:     RequestResponseEndpoint = Callable[[Request], Awaitable[Response]]  # type: ignore[assignment]\n    5: ",
    "git_author": "Rainmakerprotocol",
    "git_commit": "243bf3e46851ef386c4c932c28528eba65ed0b81",
    "git_commit_date": "2025-10-09T10:13:02+00:00"
  },
  {
    "file": "api/cache_impl.py",
    "line": 172,
    "code": "    RequestResponseEndpoint = Callable[[Request], Awaitable[Response]]  # type: ignore[assignment]",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "starlette",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1: except Exception:  # pragma: no cover - minimal fallback for tests\n    2:     BaseHTTPMiddleware = object  # type: ignore[assignment]\n    3:     RequestResponseEndpoint = Callable[[Request], Awaitable[Response]]  # type: ignore[assignment]\n    4: \n    5: ",
    "git_author": "Rainmakerprotocol",
    "git_commit": "243bf3e46851ef386c4c932c28528eba65ed0b81",
    "git_commit_date": "2025-10-09T10:13:02+00:00"
  },
  {
    "file": "api/cache_impl.py",
    "line": 178,
    "code": "    ASGIApp = Any  # type: ignore[assignment]",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "starlette",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from starlette.types import ASGIApp  # type: ignore\n    2: except Exception:  # pragma: no cover - fallback to Any\n    3:     ASGIApp = Any  # type: ignore[assignment]\n    4: \n    5: ",
    "git_author": "Rainmakerprotocol",
    "git_commit": "243bf3e46851ef386c4c932c28528eba65ed0b81",
    "git_commit_date": "2025-10-09T10:13:02+00:00"
  },
  {
    "file": "api/cache_impl.py",
    "line": 192,
    "code": "    _NEGATIVE_PATHS_SHARED: set[str] = set()",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "api",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     )\n    2: except Exception:  # pragma: no cover - degrade gracefully in partial installs\n    3:     _NEGATIVE_PATHS_SHARED: set[str] = set()\n    4: \n    5:     class _SharedPathSet(set):  # type: ignore[no-redef]",
    "git_author": "Rainmakerprotocol",
    "git_commit": "243bf3e46851ef386c4c932c28528eba65ed0b81",
    "git_commit_date": "2025-10-09T10:13:02+00:00"
  },
  {
    "file": "api/cache_impl.py",
    "line": 212,
    "code": "    _reg_get_serving_for_app = None  # type: ignore[assignment]",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "api",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     )\n    2: except Exception:  # pragma: no cover - tolerate absence in tests\n    3:     _reg_get_serving_for_app = None  # type: ignore[assignment]\n    4:     _reg_register = None  # type: ignore[assignment]\n    5:     _reg_set_serving = None  # type: ignore[assignment]",
    "git_author": "Rainmakerprotocol",
    "git_commit": "243bf3e46851ef386c4c932c28528eba65ed0b81",
    "git_commit_date": "2025-10-09T10:13:02+00:00"
  },
  {
    "file": "api/cache_impl.py",
    "line": 213,
    "code": "    _reg_register = None  # type: ignore[assignment]",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "api",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1: except Exception:  # pragma: no cover - tolerate absence in tests\n    2:     _reg_get_serving_for_app = None  # type: ignore[assignment]\n    3:     _reg_register = None  # type: ignore[assignment]\n    4:     _reg_set_serving = None  # type: ignore[assignment]\n    5: ",
    "git_author": "Rainmakerprotocol",
    "git_commit": "243bf3e46851ef386c4c932c28528eba65ed0b81",
    "git_commit_date": "2025-10-09T10:13:02+00:00"
  },
  {
    "file": "api/cache_impl.py",
    "line": 214,
    "code": "    _reg_set_serving = None  # type: ignore[assignment]",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "api",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     _reg_get_serving_for_app = None  # type: ignore[assignment]\n    2:     _reg_register = None  # type: ignore[assignment]\n    3:     _reg_set_serving = None  # type: ignore[assignment]\n    4: \n    5: ",
    "git_author": "Rainmakerprotocol",
    "git_commit": "243bf3e46851ef386c4c932c28528eba65ed0b81",
    "git_commit_date": "2025-10-09T10:13:02+00:00"
  },
  {
    "file": "api/cache_impl.py",
    "line": 220,
    "code": "    _global_get_lock = None  # type: ignore[assignment]",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "api",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from api.cache.concurrency import get_lock as _global_get_lock  # type: ignore\n    2: except Exception:  # pragma: no cover\n    3:     _global_get_lock = None  # type: ignore[assignment]\n    4: \n    5: ",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "api/cache_impl.py",
    "line": 271,
    "code": "    _is_sse_resp = None  # type: ignore[assignment]",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "api",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from api.cache.sse import mark_sse_bypass as _mark_sse  # type: ignore\n    2: except Exception:  # pragma: no cover - tolerate absence\n    3:     _is_sse_resp = None  # type: ignore[assignment]\n    4:     _mark_sse = None  # type: ignore[assignment]\n    5: ",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "api/cache_impl.py",
    "line": 272,
    "code": "    _mark_sse = None  # type: ignore[assignment]",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "api",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1: except Exception:  # pragma: no cover - tolerate absence\n    2:     _is_sse_resp = None  # type: ignore[assignment]\n    3:     _mark_sse = None  # type: ignore[assignment]\n    4: \n    5: # Centralized bypass logic",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "api/cache_impl.py",
    "line": 278,
    "code": "    _should_bypass_central = None  # type: ignore[assignment]",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "api",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from api.cache.bypass import should_bypass as _should_bypass_central  # type: ignore\n    2: except Exception:  # pragma: no cover - tolerate absence during refactor\n    3:     _should_bypass_central = None  # type: ignore[assignment]\n    4: \n    5: # Centralized key building (new module) — optional during refactor",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "api/cache_impl.py",
    "line": 284,
    "code": "    _kb_build_key = None  # type: ignore[assignment]",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "api",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from api.cache.key_builder import build_key as _kb_build_key  # type: ignore\n    2: except Exception:  # pragma: no cover - tolerate absence\n    3:     _kb_build_key = None  # type: ignore[assignment]\n    4: \n    5: try:",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "api/cache_impl.py",
    "line": 291,
    "code": "    _INVALIDATION_TOKENS_SHARED: dict[str, float] = {}",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "api_cache_shared",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     )\n    2: except Exception:  # pragma: no cover - fallback\n    3:     _INVALIDATION_TOKENS_SHARED: dict[str, float] = {}\n    4: \n    5: try:",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "api/cache_impl.py",
    "line": 297,
    "code": "    _CACHE_BYPASS_COUNTS: dict[str, int] = {}",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "api_cache_shared",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from api_cache_shared import BYPASS_COUNTS as _CACHE_BYPASS_COUNTS\n    2: except Exception:  # pragma: no cover - fallback\n    3:     _CACHE_BYPASS_COUNTS: dict[str, int] = {}\n    4: \n    5:     class _CacheShared:  # type: ignore",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "api/cache_impl.py",
    "line": 303,
    "code": "    _cache_shared = _CacheShared()  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "api_cache_shared",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:         SSE_CACHED_TOTAL = 0\n    2: \n    3:     _cache_shared = _CacheShared()  # type: ignore\n    4: \n    5: # Annotation regex for inline TTLs above route functions",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": ".repo_studios/faulthandler.py",
    "line": 95,
    "code": "            _fcntl = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "fcntl",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:             import fcntl as _fcntl  # POSIX-only\n    2:         except Exception:  # pragma: no cover - non-POSIX\n    3:             _fcntl = None  # type: ignore\n    4: \n    5:         _lock = _threading.Lock()",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": ".repo_studios/dep_hygiene_report.py",
    "line": 25,
    "code": "    tomllib = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "tomllib",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     import tomllib  # Python 3.11+\n    2: except ModuleNotFoundError:  # pragma: no cover\n    3:     tomllib = None  # type: ignore\n    4: \n    5: ",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": ".repo_studios/typecheck_report.py",
    "line": 31,
    "code": "    tomllib = None  # type: ignore[assignment]",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "tomllib",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     import tomllib  # Python 3.11+\n    2: except Exception:  # pragma: no cover - py311+ expected in this repo\n    3:     tomllib = None  # type: ignore[assignment]\n    4: \n    5: ",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "scripts/backfill_perf_json.py",
    "line": 44,
    "code": "    _record_dashboard_notify_event_impl = None",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "api",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from api.ui_data import record_dashboard_notify_event as _record_dashboard_notify_event_impl\n    2: except Exception:  # pragma: no cover - degrade gracefully outside API runtime\n    3:     _record_dashboard_notify_event_impl = None\n    4: \n    5: try:  # pragma: no cover - optional instrumentation when api package unavailable",
    "git_author": "Rainmakerprotocol",
    "git_commit": "07c5ab5f48e9ecfaf0ca4423c11e820d810d045d",
    "git_commit_date": "2025-10-05T13:05:42+00:00"
  },
  {
    "file": "scripts/backfill_perf_json.py",
    "line": 51,
    "code": "    _update_dashboard_backfill_latency_impl = None",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "api",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     )\n    2: except Exception:  # pragma: no cover - degrade gracefully outside API runtime\n    3:     _update_dashboard_backfill_latency_impl = None\n    4: \n    5: METRIC_MAP = [",
    "git_author": "Rainmakerprotocol",
    "git_commit": "07c5ab5f48e9ecfaf0ca4423c11e820d810d045d",
    "git_commit_date": "2025-10-05T13:05:42+00:00"
  },
  {
    "file": "scripts/service_start.py",
    "line": 27,
    "code": "    _wdm = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "scripts",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from scripts import watchdog_metrics as _wdm  # type: ignore\n    2: except Exception:  # pragma: no cover - metrics module absence should not break shim\n    3:     _wdm = None  # type: ignore\n    4: LOG = logging.getLogger(\"service_start\")\n    5: ",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "scripts/service_start.py",
    "line": 78,
    "code": "    _orchestrator_normalize_args = None",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "scripts",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     ModuleNotFoundError,\n    2: ):  # pragma: no cover - orchestrator module should exist; defensive fallback\n    3:     _orchestrator_normalize_args = None\n    4: else:\n    5:     _normalize_args = _orchestrator_normalize_args  # type: ignore[assignment]",
    "git_author": "Rainmakerprotocol",
    "git_commit": "f1cf0a53356ffabcf38bb6dcd10c97b1e28cec5a",
    "git_commit_date": "2025-10-05T02:18:41+00:00"
  },
  {
    "file": "scripts/service_start.py",
    "line": 326,
    "code": "    sys.modules[__name__] = _previous",
    "category": "sys_modules_assignment",
    "intent": "module injection/aliasing",
    "import_base": "sys",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:         if attr in _current_module.__dict__:\n    2:             _previous.__dict__[attr] = _current_module.__dict__[attr]\n    3:     sys.modules[__name__] = _previous\n    4:     _current_module = _previous\n    5: sys.modules[_SINGLETON_KEY] = _current_module",
    "git_author": "Rainmakerprotocol",
    "git_commit": "af49c19a494bd86c5168d9d29bb7f1882b5cf0c3",
    "git_commit_date": "2025-10-04T20:52:45+00:00"
  },
  {
    "file": "scripts/service_start.py",
    "line": 328,
    "code": "sys.modules[_SINGLETON_KEY] = _current_module",
    "category": "sys_modules_assignment",
    "intent": "module injection/aliasing",
    "import_base": "sys",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     sys.modules[__name__] = _previous\n    2:     _current_module = _previous\n    3: sys.modules[_SINGLETON_KEY] = _current_module\n    4: sys.modules[__name__] = _current_module\n    5: ",
    "git_author": "Rainmakerprotocol",
    "git_commit": "af49c19a494bd86c5168d9d29bb7f1882b5cf0c3",
    "git_commit_date": "2025-10-04T20:52:45+00:00"
  },
  {
    "file": "scripts/service_start.py",
    "line": 329,
    "code": "sys.modules[__name__] = _current_module",
    "category": "sys_modules_assignment",
    "intent": "module injection/aliasing",
    "import_base": "sys",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     _current_module = _previous\n    2: sys.modules[_SINGLETON_KEY] = _current_module\n    3: sys.modules[__name__] = _current_module\n    4: \n    5: if __name__ == \"__main__\":  # pragma: no cover",
    "git_author": "Rainmakerprotocol",
    "git_commit": "afae1a3641555c4b7940c9066c8f61901a5fa9d3",
    "git_commit_date": "2025-10-04T22:44:48+00:00"
  },
  {
    "file": "scripts/scale_agents.py",
    "line": 47,
    "code": "    generate_instance_env = _gen_mod.generate_instance_env  # type: ignore[assignment]",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "scripts",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:         sys.path.insert(0, str(_script_dir))\n    2:     _gen_mod = importlib.import_module(\"generate_agent_instance_env\")\n    3:     generate_instance_env = _gen_mod.generate_instance_env  # type: ignore[assignment]\n    4:     DEFAULT_DIR = _gen_mod.DEFAULT_DIR  # type: ignore[assignment]\n    5: ",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "scripts/scale_agents.py",
    "line": 48,
    "code": "    DEFAULT_DIR = _gen_mod.DEFAULT_DIR  # type: ignore[assignment]",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "scripts",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     _gen_mod = importlib.import_module(\"generate_agent_instance_env\")\n    2:     generate_instance_env = _gen_mod.generate_instance_env  # type: ignore[assignment]\n    3:     DEFAULT_DIR = _gen_mod.DEFAULT_DIR  # type: ignore[assignment]\n    4: \n    5: # (imports handled above)",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "scripts/dep_hygiene_report.py",
    "line": 25,
    "code": "    tomllib = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "tomllib",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     import tomllib  # Python 3.11+\n    2: except ModuleNotFoundError:  # pragma: no cover\n    3:     tomllib = None  # type: ignore\n    4: \n    5: ",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "scripts/memory_review.py",
    "line": 10,
    "code": "os.environ[\"CUDA_VISIBLE_DEVICES\"] = \"\"",
    "category": "global_env_mutation",
    "intent": "unspecified monkey patch",
    "import_base": "os",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": "# Force CPU mode by setting environment variables before importing torch",
    "context": "    1: \n    2: # Force CPU mode by setting environment variables before importing torch\n    3: os.environ[\"CUDA_VISIBLE_DEVICES\"] = \"\"\n    4: os.environ[\"TORCH_DEVICE\"] = \"cpu\"\n    5: ",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "scripts/memory_review.py",
    "line": 11,
    "code": "os.environ[\"TORCH_DEVICE\"] = \"cpu\"",
    "category": "global_env_mutation",
    "intent": "unspecified monkey patch",
    "import_base": "os",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1: # Force CPU mode by setting environment variables before importing torch\n    2: os.environ[\"CUDA_VISIBLE_DEVICES\"] = \"\"\n    3: os.environ[\"TORCH_DEVICE\"] = \"cpu\"\n    4: \n    5: # Add path for voice engine",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "scripts/maintenance_orchestrator.py",
    "line": 54,
    "code": "        CronTrigger = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "apscheduler",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:         from apscheduler.triggers.cron import CronTrigger\n    2:     except Exception:  # pragma: no cover - cron optional\n    3:         CronTrigger = None  # type: ignore\n    4: except Exception:  # pragma: no cover - scheduler optional\n    5:     BackgroundScheduler = None  # type: ignore",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "scripts/maintenance_orchestrator.py",
    "line": 56,
    "code": "    BackgroundScheduler = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "apscheduler",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:         CronTrigger = None  # type: ignore\n    2: except Exception:  # pragma: no cover - scheduler optional\n    3:     BackgroundScheduler = None  # type: ignore\n    4:     IntervalTrigger = None  # type: ignore\n    5:     CronTrigger = None  # type: ignore",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "scripts/maintenance_orchestrator.py",
    "line": 57,
    "code": "    IntervalTrigger = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "apscheduler",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1: except Exception:  # pragma: no cover - scheduler optional\n    2:     BackgroundScheduler = None  # type: ignore\n    3:     IntervalTrigger = None  # type: ignore\n    4:     CronTrigger = None  # type: ignore\n    5: ",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "scripts/maintenance_orchestrator.py",
    "line": 58,
    "code": "    CronTrigger = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "apscheduler",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     BackgroundScheduler = None  # type: ignore\n    2:     IntervalTrigger = None  # type: ignore\n    3:     CronTrigger = None  # type: ignore\n    4: \n    5: ",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "mrp/memory_lookup.py",
    "line": 12,
    "code": "os.environ[\"CUDA_VISIBLE_DEVICES\"] = \"\"",
    "category": "global_env_mutation",
    "intent": "unspecified monkey patch",
    "import_base": "os",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": "# Force CPU mode by setting environment variables before other imports",
    "context": "    1: \n    2: # Force CPU mode by setting environment variables before other imports\n    3: os.environ[\"CUDA_VISIBLE_DEVICES\"] = \"\"\n    4: os.environ[\"TORCH_DEVICE\"] = \"cpu\"\n    5: ",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "mrp/memory_lookup.py",
    "line": 13,
    "code": "os.environ[\"TORCH_DEVICE\"] = \"cpu\"",
    "category": "global_env_mutation",
    "intent": "unspecified monkey patch",
    "import_base": "os",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1: # Force CPU mode by setting environment variables before other imports\n    2: os.environ[\"CUDA_VISIBLE_DEVICES\"] = \"\"\n    3: os.environ[\"TORCH_DEVICE\"] = \"cpu\"\n    4: \n    5: # === CONFIGURATION ===",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "src/audio/src/torchaudio/models/decoder/_ctc_decoder.py",
    "line": 57,
    "code": "        _KenLM = None",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "flashlight",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:         from flashlight.lib.text.decoder import KenLM as _KenLM\n    2:     except Exception:\n    3:         _KenLM = None\n    4: \n    5: __all__ = [",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "src/audio/docs/source/conf.py",
    "line": 364,
    "code": "TypedField.make_field = patched_make_field",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "sphinx",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1: \n    2: \n    3: TypedField.make_field = patched_make_field\n    4: \n    5: ",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "src/vision/test/test_transforms_video.py",
    "line": 13,
    "code": "    stats = None",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "scipy",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from scipy import stats\n    2: except ImportError:\n    3:     stats = None\n    4: \n    5: ",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "src/vision/test/test_image.py",
    "line": 47,
    "code": "PILLOW_VERSION = tuple(int(x) for x in PILLOW_VERSION.split(\".\"))",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "PIL",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1: IS_MACOS = sys.platform == \"darwin\"\n    2: IS_LINUX = sys.platform == \"linux\"\n    3: PILLOW_VERSION = tuple(int(x) for x in PILLOW_VERSION.split(\".\"))\n    4: WEBP_TEST_IMAGES_DIR = os.environ.get(\"WEBP_TEST_IMAGES_DIR\", \"\")\n    5: # See https://github.com/pytorch/vision/pull/8724#issuecomment-2503964558",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "src/vision/test/test_utils.py",
    "line": 17,
    "code": "PILLOW_VERSION = tuple(int(x) for x in PILLOW_VERSION.split(\".\"))",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "PIL",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1: from torchvision.transforms.v2.functional import to_dtype\n    2: \n    3: PILLOW_VERSION = tuple(int(x) for x in PILLOW_VERSION.split(\".\"))\n    4: \n    5: boxes = torch.tensor([[0, 0, 20, 20], [0, 0, 0, 0], [10, 15, 30, 35], [23, 35, 93, 95]], dtype=torch.float)",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "src/vision/test/test_io.py",
    "line": 18,
    "code": "    av = None",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "av",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     io.video._check_av_available()\n    2: except ImportError:\n    3:     av = None\n    4: \n    5: ",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "src/vision/test/test_videoapi.py",
    "line": 24,
    "code": "    av = None",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "av",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     torchvision.io.video._check_av_available()\n    2: except ImportError:\n    3:     av = None\n    4: \n    5: ",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "src/vision/test/test_video_reader.py",
    "line": 22,
    "code": "    av = None",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "av",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     io.video._check_av_available()\n    2: except ImportError:\n    3:     av = None\n    4: \n    5: ",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "src/vision/test/test_transforms.py",
    "line": 21,
    "code": "    accimage = None",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "accimage",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     import accimage\n    2: except ImportError:\n    3:     accimage = None\n    4: \n    5: try:",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "src/vision/test/test_transforms.py",
    "line": 26,
    "code": "    stats = None",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "scipy",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from scipy import stats\n    2: except ImportError:\n    3:     stats = None\n    4: \n    5: from common_utils import assert_equal, cycle_over, float_dtypes, int_dtypes",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "src/vision/test/test_datasets_download.py",
    "line": 45,
    "code": "urlopen = limit_requests_per_time()(urlopen)",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "urllib",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1: \n    2: \n    3: urlopen = limit_requests_per_time()(urlopen)\n    4: \n    5: ",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "src/vision/test/test_datasets_download.py",
    "line": 76,
    "code": "urlopen = resolve_redirects()(urlopen)",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "urllib",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1: \n    2: \n    3: urlopen = resolve_redirects()(urlopen)\n    4: \n    5: ",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "src/vision/test/test_video_gpu_decoder.py",
    "line": 12,
    "code": "    av = None",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "av",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     import av\n    2: except ImportError:\n    3:     av = None\n    4: \n    5: VIDEO_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"assets\", \"videos\")",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "src/vision/.github/scripts/run-clang-format.py",
    "line": 48,
    "code": "    DEVNULL = open(os.devnull, \"wb\")",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "subprocess",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from subprocess import DEVNULL  # py3k\n    2: except ImportError:\n    3:     DEVNULL = open(os.devnull, \"wb\")\n    4: \n    5: ",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "src/vision/torchvision/transforms/_functional_pil.py",
    "line": 14,
    "code": "    accimage = None",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "accimage",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     import accimage\n    2: except ImportError:\n    3:     accimage = None\n    4: \n    5: ",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "src/vision/torchvision/transforms/transforms.py",
    "line": 13,
    "code": "    accimage = None",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "accimage",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     import accimage\n    2: except ImportError:\n    3:     accimage = None\n    4: \n    5: from ..utils import _log_api_usage_once",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "src/vision/torchvision/transforms/functional.py",
    "line": 17,
    "code": "    accimage = None",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "accimage",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     import accimage\n    2: except ImportError:\n    3:     accimage = None\n    4: \n    5: from ..utils import _Image_fromarray, _log_api_usage_once",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "src/vision/torchvision/io/__init__.py",
    "line": 4,
    "code": "    _HAS_GPU_VIDEO_DECODER = False",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "_load_gpu_decoder",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from ._load_gpu_decoder import _HAS_GPU_VIDEO_DECODER\n    2: except ModuleNotFoundError:\n    3:     _HAS_GPU_VIDEO_DECODER = False\n    4: \n    5: from ._video_opt import (",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "src/vision/torchvision/io/video.py",
    "line": 21,
    "code": "        av = ImportError(",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "av",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     av.logging.set_level(av.logging.ERROR)\n    2:     if not hasattr(av.video.frame.VideoFrame, \"pict_type\"):\n    3:         av = ImportError(\n    4:             \"\"\"\\\n    5: Your version of PyAV is too old for the necessary video operations in torchvision.",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "src/vision/torchvision/io/video.py",
    "line": 35,
    "code": "    av = ImportError(",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "av",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:         FFmpegError = av.AVError\n    2: except ImportError:\n    3:     av = ImportError(\n    4:         \"\"\"\\\n    5: PyAV is not installed, and is necessary for the video operations in torchvision.",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "src/vision/torchvision/io/video_reader.py",
    "line": 28,
    "code": "        av = ImportError(",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "av",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     av.logging.set_level(av.logging.ERROR)\n    2:     if not hasattr(av.video.frame.VideoFrame, \"pict_type\"):\n    3:         av = ImportError(\n    4:             \"\"\"\\\n    5: Your version of PyAV is too old for the necessary video operations in torchvision.",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "src/vision/torchvision/io/video_reader.py",
    "line": 38,
    "code": "    av = ImportError(",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "av",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:         )\n    2: except ImportError:\n    3:     av = ImportError(\n    4:         \"\"\"\\\n    5: PyAV is not installed, and is necessary for the video operations in torchvision.",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "src/vision/docs/source/conf.py",
    "line": 65,
    "code": "gen_rst.EXAMPLE_HEADER = \"\"\"",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "sphinx_gallery",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1: from sphinx_gallery import gen_rst\n    2: \n    3: gen_rst.EXAMPLE_HEADER = \"\"\"\n    4: .. DO NOT EDIT.\n    5: .. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "src/vision/docs/source/conf.py",
    "line": 65,
    "code": "gen_rst.EXAMPLE_HEADER = \"\"\"",
    "category": "import_time_side_effect",
    "intent": "import-time behavior override",
    "import_base": "sphinx_gallery",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1: from sphinx_gallery import gen_rst\n    2: \n    3: gen_rst.EXAMPLE_HEADER = \"\"\"\n    4: .. DO NOT EDIT.\n    5: .. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "src/vision/docs/source/conf.py",
    "line": 328,
    "code": "TypedField.make_field = patched_make_field",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "sphinx",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1: \n    2: \n    3: TypedField.make_field = patched_make_field\n    4: \n    5: ",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "src/vision/gallery/others/plot_scripted_tensor_transforms.py",
    "line": 31,
    "code": "sys.path += [\"../transforms\"]",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "sys",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1: import sys\n    2: \n    3: sys.path += [\"../transforms\"]\n    4: from helpers import plot\n    5: ",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "src/vision/gallery/others/plot_scripted_tensor_transforms.py",
    "line": 31,
    "code": "sys.path += [\"../transforms\"]",
    "category": "import_time_side_effect",
    "intent": "import-time behavior override",
    "import_base": "sys",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1: import sys\n    2: \n    3: sys.path += [\"../transforms\"]\n    4: from helpers import plot\n    5: ",
    "git_author": null,
    "git_commit": null,
    "git_commit_date": null
  },
  {
    "file": "scripts/maintenance_jobs/trend.py",
    "line": 20,
    "code": "    run_retention_and_rollups = None  # type: ignore[assignment]",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "agents",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from agents.core.monitoring.nightly_aggregator import run_retention_and_rollups\n    2: except Exception:  # pragma: no cover - fallback handled at runtime\n    3:     run_retention_and_rollups = None  # type: ignore[assignment]\n    4: \n    5: from scripts.maintenance_orchestrator import (",
    "git_author": "Rainmakerprotocol",
    "git_commit": "99521098f09bf8f65a4f6f454e9c1442de68853f",
    "git_commit_date": "2025-10-07T23:06:42+00:00"
  },
  {
    "file": "scripts/service_start/watchdog.py",
    "line": 22,
    "code": "    _wdm = None  # type: ignore[assignment]",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "scripts",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from scripts import watchdog_metrics as _wdm  # type: ignore\n    2: except Exception:  # pragma: no cover - best effort import\n    3:     _wdm = None  # type: ignore[assignment]\n    4: \n    5: try:  # pragma: no cover - optional UI instrumentation when api package unavailable",
    "git_author": "Rainmakerprotocol",
    "git_commit": "af49c19a494bd86c5168d9d29bb7f1882b5cf0c3",
    "git_commit_date": "2025-10-04T20:52:45+00:00"
  },
  {
    "file": "scripts/service_start/watchdog.py",
    "line": 27,
    "code": "    _record_watchdog_escalation_impl = None",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "api",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from api.ui_data import record_watchdog_escalation as _record_watchdog_escalation_impl\n    2: except Exception:  # pragma: no cover - degrade gracefully when ui_data missing\n    3:     _record_watchdog_escalation_impl = None\n    4: \n    5: ",
    "git_author": "Rainmakerprotocol",
    "git_commit": "07c5ab5f48e9ecfaf0ca4423c11e820d810d045d",
    "git_commit_date": "2025-10-05T13:05:42+00:00"
  },
  {
    "file": "agents/core/classic_endpoints.py",
    "line": 45,
    "code": "    psutil = _Ps()  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "psutil",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:             return _Ps._VM()\n    2: \n    3:     psutil = _Ps()  # type: ignore\n    4: \n    5: ",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "agents/core/jarvis_api.py",
    "line": 119,
    "code": "    psutil = _Ps()  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "psutil",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:             return _Ps._VM()\n    2: \n    3:     psutil = _Ps()  # type: ignore\n    4: \n    5: import asyncio as _asyncio",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "agents/core/ws_chat_handlers.py",
    "line": 24,
    "code": "    llama_stream = None  # type: ignore[assignment]",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "agents",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from agents.core.ws_backends import stream_llama as llama_stream  # type: ignore\n    2: except Exception:  # pragma: no cover - fallback when backend not present\n    3:     llama_stream = None  # type: ignore[assignment]\n    4: \n    5: ",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "agents/system/__init__.py",
    "line": 224,
    "code": "            sys.modules[_spec.name] = _mod",
    "category": "sys_modules_assignment",
    "intent": "module injection/aliasing",
    "import_base": "sys",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:         if _spec and _spec.loader:\n    2:             _mod = importlib.util.module_from_spec(_spec)\n    3:             sys.modules[_spec.name] = _mod\n    4:             _spec.loader.exec_module(_mod)\n    5:             DiagnosticAgent = _mod.DiagnosticAgent  # type: ignore[attr-defined,assignment]",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "agents/system/__init__.py",
    "line": 226,
    "code": "            DiagnosticAgent = _mod.DiagnosticAgent  # type: ignore[attr-defined,assignment]",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "diagnostic_agent",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:             sys.modules[_spec.name] = _mod\n    2:             _spec.loader.exec_module(_mod)\n    3:             DiagnosticAgent = _mod.DiagnosticAgent  # type: ignore[attr-defined,assignment]\n    4:         else:  # pragma: no cover - defensive\n    5:             raise ImportError(\"Cannot load legacy DiagnosticAgent module\") from None",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "agents/orchestrator/config/loader.py",
    "line": 17,
    "code": "    yaml = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "yaml",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     import yaml  # type: ignore\n    2: except Exception:  # pragma: no cover - optional dependency\n    3:     yaml = None  # type: ignore\n    4: \n    5: ",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "agents/orchestrator/config/loader.py",
    "line": 25,
    "code": "    validate_registry = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "schema",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from .schema import RegistryModel, RegistryValidationError, validate_registry  # type: ignore\n    2: except Exception:  # pragma: no cover - fallback path\n    3:     validate_registry = None  # type: ignore\n    4:     RegistryValidationError = Exception  # type: ignore\n    5: ",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "agents/orchestrator/config/loader.py",
    "line": 26,
    "code": "    RegistryValidationError = Exception  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "schema",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1: except Exception:  # pragma: no cover - fallback path\n    2:     validate_registry = None  # type: ignore\n    3:     RegistryValidationError = Exception  # type: ignore\n    4: \n    5:     class RegistryModel(dict):  # type: ignore",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "agents/interface/chainlit/widgets.py",
    "line": 42,
    "code": "    cl = _StubCL()  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "chainlit",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:             )\n    2: \n    3:     cl = _StubCL()  # type: ignore\n    4: \n    5: from .api_client import JarvisApiClient",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "agents/interface/chainlit/toast_sink.py",
    "line": 16,
    "code": "    cl = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "chainlit",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     import chainlit as cl  # type: ignore\n    2: except Exception:  # pragma: no cover\n    3:     cl = None  # type: ignore\n    4: \n    5: from agents.interface.chainlit.widgets.toasts import normalize_toast, render_toast_message",
    "git_author": "Rainmakerprotocol",
    "git_commit": "b8ea89e5bfb6d883ad12545f9e41215e328ad0a6",
    "git_commit_date": "2025-10-06T20:58:55+00:00"
  },
  {
    "file": "agents/interface/chainlit/widget_helpers.py",
    "line": 53,
    "code": "    _metrics_mod = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "widgets",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from .widgets import metrics as _metrics_mod\n    2: except Exception:  # pragma: no cover\n    3:     _metrics_mod = None  # type: ignore\n    4: \n    5: ",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "agents/interface/model_comparison/adapters.py",
    "line": 38,
    "code": "    _mrp_log = None  # type: ignore[assignment]",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "agents",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from agents.mrp_logger import log_interaction as _mrp_log\n    2: except Exception:  # pragma: no cover - logging is optional in stripped envs\n    3:     _mrp_log = None  # type: ignore[assignment]\n    4: \n    5: ",
    "git_author": "Rainmakerprotocol",
    "git_commit": "46a9927a0b7052ef6636264f554fe57bb2f2c14b",
    "git_commit_date": "2025-10-07T02:23:05+00:00"
  },
  {
    "file": "agents/interface/export_toolkit/service.py",
    "line": 32,
    "code": "    _mrp_log = None  # type: ignore[assignment]",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "agents",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from agents.mrp_logger import log_interaction as _mrp_log\n    2: except Exception:  # pragma: no cover - logging is optional in minimal envs\n    3:     _mrp_log = None  # type: ignore[assignment]\n    4: \n    5: EXPORT_FEATURE_FLAG_ENV = \"DASHBOARD_EXPORT_TOOLKIT_ENABLE\"",
    "git_author": "Rainmakerprotocol",
    "git_commit": "46a9927a0b7052ef6636264f554fe57bb2f2c14b",
    "git_commit_date": "2025-10-07T02:23:05+00:00"
  },
  {
    "file": "agents/interface/chainlit/tests/test_on_chat_start_sidebar_bootstrap.py",
    "line": 11,
    "code": "    dt.UTC = dt.UTC  # type: ignore[attr-defined]",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "datetime",
    "is_test": true,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1: \n    2: if not hasattr(dt, \"UTC\"):\n    3:     dt.UTC = dt.UTC  # type: ignore[attr-defined]\n    4: if not hasattr(datetime_cls, \"UTC\"):\n    5: ",
    "git_author": "Rainmakerprotocol",
    "git_commit": "f8ae3917a1f27e5cc18eaad07bf9fa4a7c3bf2b4",
    "git_commit_date": "2025-10-10T00:34:55+00:00"
  },
  {
    "file": "agents/interface/chainlit/tests/test_on_chat_start_sidebar_bootstrap.py",
    "line": 11,
    "code": "    dt.UTC = dt.UTC  # type: ignore[attr-defined]",
    "category": "import_time_side_effect",
    "intent": "import-time behavior override",
    "import_base": "datetime",
    "is_test": true,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1: \n    2: if not hasattr(dt, \"UTC\"):\n    3:     dt.UTC = dt.UTC  # type: ignore[attr-defined]\n    4: if not hasattr(datetime_cls, \"UTC\"):\n    5: ",
    "git_author": "Rainmakerprotocol",
    "git_commit": "f8ae3917a1f27e5cc18eaad07bf9fa4a7c3bf2b4",
    "git_commit_date": "2025-10-10T00:34:55+00:00"
  },
  {
    "file": "agents/interface/chainlit/tests/test_on_chat_start_sidebar_bootstrap.py",
    "line": 18,
    "code": "    dt.datetime = _CompatDatetime  # type: ignore[attr-defined]",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "datetime",
    "is_test": true,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1: \n    2:     _CompatDatetime.UTC = dt.UTC  # type: ignore[attr-defined]\n    3:     dt.datetime = _CompatDatetime  # type: ignore[attr-defined]\n    4: \n    5: ROOT = Path(__file__).resolve().parents[4]",
    "git_author": "Rainmakerprotocol",
    "git_commit": "99521098f09bf8f65a4f6f454e9c1442de68853f",
    "git_commit_date": "2025-10-07T23:06:42+00:00"
  },
  {
    "file": "agents/interface/chainlit/tests/conftest.py",
    "line": 88,
    "code": "sys.modules[\"chainlit\"] = cl",
    "category": "sys_modules_assignment",
    "intent": "module injection/aliasing",
    "import_base": "sys",
    "is_test": true,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1: cl.Action = _Action  # type: ignore\n    2: \n    3: sys.modules[\"chainlit\"] = cl\n    4: \n    5: ",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "agents/system/diagnostic_agent/__init__.py",
    "line": 35,
    "code": "    sys.modules[_spec.name] = _mod",
    "category": "sys_modules_assignment",
    "intent": "module injection/aliasing",
    "import_base": "sys",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1: if _spec and _spec.loader:  # pragma: no cover - import shim\n    2:     _mod = importlib.util.module_from_spec(_spec)\n    3:     sys.modules[_spec.name] = _mod\n    4:     _spec.loader.exec_module(_mod)\n    5:     DiagnosticAgent = _mod.DiagnosticAgent  # type: ignore[attr-defined]",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "agents/system/diagnostic_agent/__init__.py",
    "line": 64,
    "code": "    AgentConfig: _Any = None",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "agents",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from typing import Any as _Any\n    2: \n    3:     AgentConfig: _Any = None\n    4:     AgentHandle: _Any = None\n    5:     EventBus: _Any = None",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "agents/system/diagnostic_agent/__init__.py",
    "line": 65,
    "code": "    AgentHandle: _Any = None",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "agents",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1: \n    2:     AgentConfig: _Any = None\n    3:     AgentHandle: _Any = None\n    4:     EventBus: _Any = None\n    5:     MetricsWriter: _Any = None",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "agents/system/diagnostic_agent/__init__.py",
    "line": 66,
    "code": "    EventBus: _Any = None",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "agents",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     AgentConfig: _Any = None\n    2:     AgentHandle: _Any = None\n    3:     EventBus: _Any = None\n    4:     MetricsWriter: _Any = None\n    5:     SubscriptionHandle: _Any = None",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "agents/system/diagnostic_agent/__init__.py",
    "line": 67,
    "code": "    MetricsWriter: _Any = None",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "agents",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     AgentHandle: _Any = None\n    2:     EventBus: _Any = None\n    3:     MetricsWriter: _Any = None\n    4:     SubscriptionHandle: _Any = None\n    5:     DIAG_AGENT_ACTIVE_GAUGE: str = \"diagnostic_agent_active\"",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "agents/system/diagnostic_agent/__init__.py",
    "line": 68,
    "code": "    SubscriptionHandle: _Any = None",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "agents",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     EventBus: _Any = None\n    2:     MetricsWriter: _Any = None\n    3:     SubscriptionHandle: _Any = None\n    4:     DIAG_AGENT_ACTIVE_GAUGE: str = \"diagnostic_agent_active\"\n    5:     DIAG_AGENT_ERRORS_TOTAL: str = \"diagnostic_agent_errors_total\"",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "agents/system/diagnostic_agent/__init__.py",
    "line": 69,
    "code": "    DIAG_AGENT_ACTIVE_GAUGE: str = \"diagnostic_agent_active\"",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "agents",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     MetricsWriter: _Any = None\n    2:     SubscriptionHandle: _Any = None\n    3:     DIAG_AGENT_ACTIVE_GAUGE: str = \"diagnostic_agent_active\"\n    4:     DIAG_AGENT_ERRORS_TOTAL: str = \"diagnostic_agent_errors_total\"\n    5:     DIAG_AGENT_EVENTS_DROPPED_TOTAL: str = \"diagnostic_agent_events_dropped_total\"",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "agents/system/diagnostic_agent/__init__.py",
    "line": 70,
    "code": "    DIAG_AGENT_ERRORS_TOTAL: str = \"diagnostic_agent_errors_total\"",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "agents",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     SubscriptionHandle: _Any = None\n    2:     DIAG_AGENT_ACTIVE_GAUGE: str = \"diagnostic_agent_active\"\n    3:     DIAG_AGENT_ERRORS_TOTAL: str = \"diagnostic_agent_errors_total\"\n    4:     DIAG_AGENT_EVENTS_DROPPED_TOTAL: str = \"diagnostic_agent_events_dropped_total\"\n    5:     DIAG_AGENT_EVENTS_PROCESSED_TOTAL: str = \"diagnostic_agent_events_processed_total\"",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "agents/system/diagnostic_agent/__init__.py",
    "line": 71,
    "code": "    DIAG_AGENT_EVENTS_DROPPED_TOTAL: str = \"diagnostic_agent_events_dropped_total\"",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "agents",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     DIAG_AGENT_ACTIVE_GAUGE: str = \"diagnostic_agent_active\"\n    2:     DIAG_AGENT_ERRORS_TOTAL: str = \"diagnostic_agent_errors_total\"\n    3:     DIAG_AGENT_EVENTS_DROPPED_TOTAL: str = \"diagnostic_agent_events_dropped_total\"\n    4:     DIAG_AGENT_EVENTS_PROCESSED_TOTAL: str = \"diagnostic_agent_events_processed_total\"\n    5: ",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "agents/system/diagnostic_agent/__init__.py",
    "line": 72,
    "code": "    DIAG_AGENT_EVENTS_PROCESSED_TOTAL: str = \"diagnostic_agent_events_processed_total\"",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "agents",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     DIAG_AGENT_ERRORS_TOTAL: str = \"diagnostic_agent_errors_total\"\n    2:     DIAG_AGENT_EVENTS_DROPPED_TOTAL: str = \"diagnostic_agent_events_dropped_total\"\n    3:     DIAG_AGENT_EVENTS_PROCESSED_TOTAL: str = \"diagnostic_agent_events_processed_total\"\n    4: \n    5:     def increment_errors(*_args, **_kwargs):",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "agents/core/messaging/bus.py",
    "line": 398,
    "code": "        EventBus = InProcessEventBus  # type: ignore[assignment]",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "compat_event_bus",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": "# Fallback to legacy to avoid hard import failure if adapter unavailable",
    "context": "    1:     except Exception:\n    2:         # Fallback to legacy to avoid hard import failure if adapter unavailable\n    3:         EventBus = InProcessEventBus  # type: ignore[assignment]\n    4: else:\n    5:     EventBus = InProcessEventBus",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "agents/core/messaging/bus.py",
    "line": 400,
    "code": "    EventBus = InProcessEventBus",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "compat_event_bus",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:         EventBus = InProcessEventBus  # type: ignore[assignment]\n    2: else:\n    3:     EventBus = InProcessEventBus\n    4: \n    5: __all__ = [",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "agents/core/metrics_storage/__init__.py",
    "line": 14,
    "code": "    setattr(_this_module, attr, getattr(_metrics_storage, attr))",
    "category": "setattr_on_import_or_class",
    "intent": "unspecified monkey patch",
    "import_base": null,
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1: # Re-export public attributes from the canonical package.\n    2: for attr in getattr(_metrics_storage, \"__all__\", []):\n    3:     setattr(_this_module, attr, getattr(_metrics_storage, attr))\n    4: \n    5: # Ensure important subpackages are reachable under the legacy namespace.",
    "git_author": "Rainmakerprotocol",
    "git_commit": "dfe4ed6a089e046a71324118372a2ab9629c4c5a",
    "git_commit_date": "2025-10-13T09:06:49+00:00"
  },
  {
    "file": "agents/core/monitoring/exporter.py",
    "line": 33,
    "code": "    HashChainLedger = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "ledger",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from ledger.hash_chain import HashChainLedger  # optional provenance\n    2: except Exception:  # pragma: no cover\n    3:     HashChainLedger = None  # type: ignore\n    4: from .metrics_storage import schema\n    5: ",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "agents/core/monitoring/visualization/__init__.py",
    "line": 48,
    "code": "    DashboardGenerator = None  # type: ignore[assignment]",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "dashboard",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:         _e,\n    2:     )\n    3:     DashboardGenerator = None  # type: ignore[assignment]\n    4:     get_dashboard_generator = None  # type: ignore[assignment]\n    5:     initialize_dashboard_generator = None  # type: ignore[assignment]",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "agents/core/monitoring/visualization/__init__.py",
    "line": 49,
    "code": "    get_dashboard_generator = None  # type: ignore[assignment]",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "dashboard",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     )\n    2:     DashboardGenerator = None  # type: ignore[assignment]\n    3:     get_dashboard_generator = None  # type: ignore[assignment]\n    4:     initialize_dashboard_generator = None  # type: ignore[assignment]\n    5:     _DASHBOARD_AVAILABLE = False",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "agents/core/monitoring/visualization/__init__.py",
    "line": 50,
    "code": "    initialize_dashboard_generator = None  # type: ignore[assignment]",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "dashboard",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     DashboardGenerator = None  # type: ignore[assignment]\n    2:     get_dashboard_generator = None  # type: ignore[assignment]\n    3:     initialize_dashboard_generator = None  # type: ignore[assignment]\n    4:     _DASHBOARD_AVAILABLE = False\n    5: from .error_analytics import (",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "agents/core/monitoring/collectors/default.py",
    "line": 47,
    "code": "    SystemPowerCollector = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "system_power",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from .system_power import SystemPowerCollector  # type: ignore\n    2: except Exception:  # pragma: no cover - optional import failures\n    3:     SystemPowerCollector = None  # type: ignore\n    4: \n    5: __all__ = [",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "agents/core/monitoring/resource_monitor/collectors.py",
    "line": 40,
    "code": "    psutil = _PsutilShim()  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "psutil",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:             return {}\n    2: \n    3:     psutil = _PsutilShim()  # type: ignore\n    4: \n    5: from .types import CPUInfo, DiskInfo, MemoryInfo",
    "git_author": "Rainmakerprotocol",
    "git_commit": "8f9cef967e4de1f4c9ea34b547f4f335d73049bc",
    "git_commit_date": "2025-10-10T21:01:01+00:00"
  },
  {
    "file": "agents/core/monitoring/metrics_storage/__init__.py",
    "line": 25,
    "code": "    MetricType: Any = None",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "constants",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     )\n    2: except Exception:  # pragma: no cover - defensive fallback for optional import sites\n    3:     MetricType: Any = None\n    4:     StorageFormat: Any = None\n    5:     StorageOperation: Any = None",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "agents/core/monitoring/metrics_storage/__init__.py",
    "line": 26,
    "code": "    StorageFormat: Any = None",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "constants",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1: except Exception:  # pragma: no cover - defensive fallback for optional import sites\n    2:     MetricType: Any = None\n    3:     StorageFormat: Any = None\n    4:     StorageOperation: Any = None\n    5:     TimeGranularity: Any = None",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "agents/core/monitoring/metrics_storage/__init__.py",
    "line": 27,
    "code": "    StorageOperation: Any = None",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "constants",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     MetricType: Any = None\n    2:     StorageFormat: Any = None\n    3:     StorageOperation: Any = None\n    4:     TimeGranularity: Any = None\n    5: ",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "agents/core/monitoring/metrics_storage/__init__.py",
    "line": 28,
    "code": "    TimeGranularity: Any = None",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "constants",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     StorageFormat: Any = None\n    2:     StorageOperation: Any = None\n    3:     TimeGranularity: Any = None\n    4: \n    5: # Provide backward compatible MetricsStorage symbol by aliasing the primary",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "agents/core/monitoring/metrics_storage/base/model_metrics.py",
    "line": 12,
    "code": "logger = logging.getLogger(\"metrics_storage.base\")",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "logger",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1: from .metrics_core import VALIDATORS_MODULE_NOT_AVAILABLE_MSG, MetricsStorageBase\n    2: \n    3: logger = logging.getLogger(\"metrics_storage.base\")\n    4: \n    5: ",
    "git_author": "Rainmakerprotocol",
    "git_commit": "1734a5502c22c050b376f8d2c8ef8e60dfa82944",
    "git_commit_date": "2025-10-10T10:15:33+00:00"
  },
  {
    "file": "agents/core/monitoring/metrics_storage/base/__init__.py",
    "line": 20,
    "code": "    TimeSeriesPoint = TimeSeries = TimeSeriesCollection = None  # type: ignore[assignment]",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "time_series",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from ..time_series.models import TimeSeries, TimeSeriesPoint  # type: ignore\n    2: except Exception:  # pragma: no cover\n    3:     TimeSeriesPoint = TimeSeries = TimeSeriesCollection = None  # type: ignore[assignment]\n    4: \n    5: __all__ = [",
    "git_author": "Rainmakerprotocol",
    "git_commit": "1734a5502c22c050b376f8d2c8ef8e60dfa82944",
    "git_commit_date": "2025-10-10T10:15:33+00:00"
  },
  {
    "file": "agents/core/monitoring/metrics_storage/base/__init__.py",
    "line": 20,
    "code": "    TimeSeriesPoint = TimeSeries = TimeSeriesCollection = None  # type: ignore[assignment]",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "time_series",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from ..time_series.models import TimeSeries, TimeSeriesPoint  # type: ignore\n    2: except Exception:  # pragma: no cover\n    3:     TimeSeriesPoint = TimeSeries = TimeSeriesCollection = None  # type: ignore[assignment]\n    4: \n    5: __all__ = [",
    "git_author": "Rainmakerprotocol",
    "git_commit": "1734a5502c22c050b376f8d2c8ef8e60dfa82944",
    "git_commit_date": "2025-10-10T10:15:33+00:00"
  },
  {
    "file": "agents/core/monitoring/metrics_storage/base/__init__.py",
    "line": 20,
    "code": "    TimeSeriesPoint = TimeSeries = TimeSeriesCollection = None  # type: ignore[assignment]",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "time_series",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from ..time_series.models import TimeSeries, TimeSeriesPoint  # type: ignore\n    2: except Exception:  # pragma: no cover\n    3:     TimeSeriesPoint = TimeSeries = TimeSeriesCollection = None  # type: ignore[assignment]\n    4: \n    5: __all__ = [",
    "git_author": "Rainmakerprotocol",
    "git_commit": "1734a5502c22c050b376f8d2c8ef8e60dfa82944",
    "git_commit_date": "2025-10-10T10:15:33+00:00"
  },
  {
    "file": "agents/core/monitoring/metrics_storage/backup/system_snapshots.py",
    "line": 43,
    "code": "    BackupStorage = _BackupStorageProto",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "storage",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from .storage import BackupStorage, BackupStrategy  # re-exported facade\n    2: except Exception:  # pragma: no cover\n    3:     BackupStorage = _BackupStorageProto\n    4: \n    5:     class BackupStrategy:  # minimal fallback with CRITICAL attr",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "agents/core/monitoring/metrics_storage/backup/system_snapshots.py",
    "line": 52,
    "code": "    HashChainLedger = None  # type: ignore[assignment]",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "ledger",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from .......ledger.hash_chain import LEDGER_FILENAME, HashChainLedger\n    2: except Exception:  # pragma: no cover\n    3:     HashChainLedger = None  # type: ignore[assignment]\n    4:     LEDGER_FILENAME = \"ledger.log\"\n    5: ",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "agents/core/monitoring/metrics_storage/backup/system_snapshots.py",
    "line": 53,
    "code": "    LEDGER_FILENAME = \"ledger.log\"",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "ledger",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1: except Exception:  # pragma: no cover\n    2:     HashChainLedger = None  # type: ignore[assignment]\n    3:     LEDGER_FILENAME = \"ledger.log\"\n    4: \n    5: ISO = \"%Y-%m-%dT%H:%M:%S.%fZ\"",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "agents/core/monitoring/metrics_storage/backup/system_snapshots.py",
    "line": 302,
    "code": "    BackupSchedule = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "operations_mod",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from .operations_mod.schedule import BackupSchedule, add_backup_schedule\n    2: except Exception:  # pragma: no cover\n    3:     BackupSchedule = None  # type: ignore\n    4:     add_backup_schedule = None  # type: ignore\n    5:     BackupFrequency = None  # type: ignore",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "agents/core/monitoring/metrics_storage/backup/system_snapshots.py",
    "line": 303,
    "code": "    add_backup_schedule = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "operations_mod",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1: except Exception:  # pragma: no cover\n    2:     BackupSchedule = None  # type: ignore\n    3:     add_backup_schedule = None  # type: ignore\n    4:     BackupFrequency = None  # type: ignore\n    5: ",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "agents/core/monitoring/metrics_storage/backup/system_snapshots.py",
    "line": 304,
    "code": "    BackupFrequency = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "operations_mod",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     BackupSchedule = None  # type: ignore\n    2:     add_backup_schedule = None  # type: ignore\n    3:     BackupFrequency = None  # type: ignore\n    4: \n    5: _FREQ_MAP = {",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "agents/core/monitoring/metrics_storage/error_metrics/pattern_detection_shared.py",
    "line": 22,
    "code": "    _QueryBuilder = None  # type: ignore[assignment]",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "db_storage",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     )\n    2: except ImportError:  # pragma: no cover - QueryBuilder is optional\n    3:     _QueryBuilder = None  # type: ignore[assignment]\n    4:     QUERY_BUILDER_AVAILABLE = False\n    5:     logger.warning(",
    "git_author": "Rainmakerprotocol",
    "git_commit": "6fa945e010ee4bdb17b308379d6e9421cdba2f98",
    "git_commit_date": "2025-10-10T01:16:35+00:00"
  },
  {
    "file": "agents/core/monitoring/metrics_storage/error_storage/db.py",
    "line": 23,
    "code": "    QueryBuilder = None  # type: ignore[assignment]",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "db_storage",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from ..db_storage.query_builder import QueryBuilder\n    2: except Exception:  # pragma: no cover - optional dependency\n    3:     QueryBuilder = None  # type: ignore[assignment]\n    4:     QUERY_BUILDER_AVAILABLE = False\n    5:     logger.warning(\"QueryBuilder not available, using legacy query generation\")",
    "git_author": "Rainmakerprotocol",
    "git_commit": "8f9cef967e4de1f4c9ea34b547f4f335d73049bc",
    "git_commit_date": "2025-10-10T21:01:01+00:00"
  },
  {
    "file": "agents/core/monitoring/metrics_storage/error_storage/router_adapter.py",
    "line": 13,
    "code": "    ErrorMetricsRouter = None  # type: ignore[assignment]",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "error_metrics",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from ..error_metrics.router import ErrorMetricsRouter\n    2: except Exception:  # pragma: no cover - optional dependency\n    3:     ErrorMetricsRouter = None  # type: ignore[assignment]\n    4:     ROUTER_AVAILABLE = False\n    5:     logger.warning(\"ErrorMetricsRouter not available, falling back to legacy implementation\")",
    "git_author": "Rainmakerprotocol",
    "git_commit": "8f9cef967e4de1f4c9ea34b547f4f335d73049bc",
    "git_commit_date": "2025-10-10T21:01:01+00:00"
  },
  {
    "file": "agents/core/monitoring/metrics_storage/model_metrics/comparison.py",
    "line": 16,
    "code": "    QueryBuilder = None  # type: ignore[assignment]",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "db_storage",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     QUERY_BUILDER_AVAILABLE = True\n    2: except ImportError:  # pragma: no cover - fallback path\n    3:     QueryBuilder = None  # type: ignore[assignment]\n    4:     QUERY_BUILDER_AVAILABLE = False\n    5:     logger.warning(\"QueryBuilder not available, using basic query generation\")",
    "git_author": "Rainmakerprotocol",
    "git_commit": "94a89046f509e1506c074ac08aa0a6d89d6d1a49",
    "git_commit_date": "2025-10-13T15:01:41+00:00"
  },
  {
    "file": "agents/core/monitoring/metrics_storage/cli/backup_commands.py",
    "line": 36,
    "code": "    create_system_snapshots = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "backup",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     )\n    2: except Exception:  # pragma: no cover\n    3:     create_system_snapshots = None  # type: ignore\n    4:     restore_metrics_db = None  # type: ignore\n    5:     restore_ledger = None  # type: ignore",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "agents/core/monitoring/metrics_storage/cli/backup_commands.py",
    "line": 37,
    "code": "    restore_metrics_db = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "backup",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1: except Exception:  # pragma: no cover\n    2:     create_system_snapshots = None  # type: ignore\n    3:     restore_metrics_db = None  # type: ignore\n    4:     restore_ledger = None  # type: ignore\n    5:     schedule_system_snapshots = None  # type: ignore",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "agents/core/monitoring/metrics_storage/cli/backup_commands.py",
    "line": 38,
    "code": "    restore_ledger = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "backup",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     create_system_snapshots = None  # type: ignore\n    2:     restore_metrics_db = None  # type: ignore\n    3:     restore_ledger = None  # type: ignore\n    4:     schedule_system_snapshots = None  # type: ignore\n    5: ",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "agents/core/monitoring/metrics_storage/cli/backup_commands.py",
    "line": 39,
    "code": "    schedule_system_snapshots = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "backup",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     restore_metrics_db = None  # type: ignore\n    2:     restore_ledger = None  # type: ignore\n    3:     schedule_system_snapshots = None  # type: ignore\n    4: \n    5: try:",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "agents/core/monitoring/metrics_storage/cli/backup_commands.py",
    "line": 44,
    "code": "    HashChainLedger = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "ledger",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from ledger.hash_chain import HashChainLedger  # for validating ledger root exists\n    2: except Exception:  # pragma: no cover\n    3:     HashChainLedger = None  # type: ignore\n    4: \n    5: logger = logging.getLogger(\"metrics_storage.cli.backup_commands\")",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "agents/core/monitoring/metrics_storage/retention/scheduler.py",
    "line": 39,
    "code": "JobBase = None",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "jobs",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": "# Forward import to avoid circular dependency\n# Will be imported when needed",
    "context": "    1: # Forward import to avoid circular dependency\n    2: # Will be imported when needed\n    3: JobBase = None\n    4: \n    5: logger = logging.getLogger(\"metrics_storage.retention.scheduler\")",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "agents/core/monitoring/metrics_storage/retention/data_query.py",
    "line": 17,
    "code": "    MetricImportance = None  # type: ignore[assignment]",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "importance",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1: except ImportError:  # pragma: no cover - optional dependency\n    2:     IMPORTANCE_MODULE_AVAILABLE = False\n    3:     MetricImportance = None  # type: ignore[assignment]\n    4:     filter_by_importance = None  # type: ignore[assignment]\n    5: ",
    "git_author": "Rainmakerprotocol",
    "git_commit": "5cec5aca2e19c3c6557d0dc0c7e817beabead563",
    "git_commit_date": "2025-10-14T12:15:59+00:00"
  },
  {
    "file": "agents/core/monitoring/metrics_storage/retention/data_query.py",
    "line": 18,
    "code": "    filter_by_importance = None  # type: ignore[assignment]",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "importance",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     IMPORTANCE_MODULE_AVAILABLE = False\n    2:     MetricImportance = None  # type: ignore[assignment]\n    3:     filter_by_importance = None  # type: ignore[assignment]\n    4: \n    5: __all__ = (\"get_data_for_time_range\",)",
    "git_author": "Rainmakerprotocol",
    "git_commit": "5cec5aca2e19c3c6557d0dc0c7e817beabead563",
    "git_commit_date": "2025-10-14T12:15:59+00:00"
  },
  {
    "file": "agents/core/monitoring/metrics_storage/retention/cleanup.py",
    "line": 46,
    "code": "    _tombstone_manager = None",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "tombstone",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     TOMBSTONE_AVAILABLE = True\n    2: except ImportError:  # pragma: no cover\n    3:     _tombstone_manager = None\n    4:     TOMBSTONE_AVAILABLE = False\n    5: ",
    "git_author": "Rainmakerprotocol",
    "git_commit": "86213086910b3bbcf53195f8b2b15980725ea078",
    "git_commit_date": "2025-10-13T23:53:10+00:00"
  },
  {
    "file": "agents/core/monitoring/metrics_storage/retention/cleanup.py",
    "line": 54,
    "code": "    verify_backup_exists = None  # type: ignore[assignment]",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "utils",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from .utils import verify_backup_exists as verify_backup_exists\n    2: except ImportError:  # pragma: no cover\n    3:     verify_backup_exists = None  # type: ignore[assignment]\n    4: \n    5: ",
    "git_author": "Rainmakerprotocol",
    "git_commit": "86213086910b3bbcf53195f8b2b15980725ea078",
    "git_commit_date": "2025-10-13T23:53:10+00:00"
  },
  {
    "file": "agents/core/monitoring/metrics_storage/retention/metadata/api.py",
    "line": 85,
    "code": "        builtins.success = True",
    "category": "builtins_mutation",
    "intent": "global runtime change",
    "import_base": "builtins",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1: try:  # pragma: no cover - defensive compatibility shim\n    2:     if not hasattr(builtins, \"success\"):\n    3:         builtins.success = True\n    4:     if not hasattr(builtins, \"tombstone_id\"):\n    5:         builtins.tombstone_id = \"tombstone_123\"",
    "git_author": "Rainmakerprotocol",
    "git_commit": "806b0a87bc2d0bd53b22464e8e1f3e172fc28a37",
    "git_commit_date": "2025-10-14T01:23:37+00:00"
  },
  {
    "file": "agents/core/monitoring/metrics_storage/retention/metadata/api.py",
    "line": 87,
    "code": "        builtins.tombstone_id = \"tombstone_123\"",
    "category": "builtins_mutation",
    "intent": "global runtime change",
    "import_base": "builtins",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:         builtins.success = True\n    2:     if not hasattr(builtins, \"tombstone_id\"):\n    3:         builtins.tombstone_id = \"tombstone_123\"\n    4: except Exception:  # pragma: no cover - nothing we can do\n    5:     logger.debug(\"Unable to seed builtins with metadata defaults\", exc_info=True)",
    "git_author": "Rainmakerprotocol",
    "git_commit": "806b0a87bc2d0bd53b22464e8e1f3e172fc28a37",
    "git_commit_date": "2025-10-14T01:23:37+00:00"
  },
  {
    "file": "agents/core/monitoring/metrics_storage/retention/scheduler_components/worker_pool.py",
    "line": 17,
    "code": "JobBase = None",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "jobs",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from ..scheduler import RetentionScheduler\n    2: \n    3: JobBase = None\n    4: \n    5: ",
    "git_author": "Rainmakerprotocol",
    "git_commit": "744744b0a3e0eef24ec9d1cdfd08d99d748a2002",
    "git_commit_date": "2025-10-14T09:42:02+00:00"
  },
  {
    "file": "agents/core/monitoring/metrics_storage/retention/recovery/integrations.py",
    "line": 79,
    "code": "        _builtins.backup_path = \"/tmp/backup.json\"  # type: ignore[attr-defined]",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "builtins",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1: \n    2:     if not hasattr(_builtins, \"backup_path\"):\n    3:         _builtins.backup_path = \"/tmp/backup.json\"  # type: ignore[attr-defined]\n    4: except Exception:\n    5:     pass",
    "git_author": "Rainmakerprotocol",
    "git_commit": "806b0a87bc2d0bd53b22464e8e1f3e172fc28a37",
    "git_commit_date": "2025-10-14T01:23:37+00:00"
  },
  {
    "file": "agents/core/monitoring/metrics_storage/retention/recovery/integrations.py",
    "line": 79,
    "code": "        _builtins.backup_path = \"/tmp/backup.json\"  # type: ignore[attr-defined]",
    "category": "import_time_side_effect",
    "intent": "import-time behavior override",
    "import_base": "builtins",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1: \n    2:     if not hasattr(_builtins, \"backup_path\"):\n    3:         _builtins.backup_path = \"/tmp/backup.json\"  # type: ignore[attr-defined]\n    4: except Exception:\n    5:     pass",
    "git_author": "Rainmakerprotocol",
    "git_commit": "806b0a87bc2d0bd53b22464e8e1f3e172fc28a37",
    "git_commit_date": "2025-10-14T01:23:37+00:00"
  },
  {
    "file": "agents/core/monitoring/metrics_storage/model_metrics/retrieval/service.py",
    "line": 23,
    "code": "    QueryBuilder = None  # type: ignore[assignment]",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "db_storage",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1: except Exception:  # pragma: no cover - optional dependency with heavy imports\n    2:     QUERY_BUILDER_AVAILABLE = False\n    3:     QueryBuilder = None  # type: ignore[assignment]\n    4:     logger.warning(\"QueryBuilder not available, using basic query generation\")\n    5: ",
    "git_author": "Rainmakerprotocol",
    "git_commit": "dfe4ed6a089e046a71324118372a2ab9629c4c5a",
    "git_commit_date": "2025-10-13T09:06:49+00:00"
  },
  {
    "file": "agents/core/monitoring/metrics_storage/model_metrics/batch_metrics/repository.py",
    "line": 28,
    "code": "    QueryBuilder = None",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "db_storage",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1: except ImportError:  # pragma: no cover - fallback path only when optional dep missing\n    2:     QUERY_BUILDER_AVAILABLE = False\n    3:     QueryBuilder = None\n    4:     logger.warning(\"QueryBuilder not available for batch metrics, using standard queries\")\n    5: ",
    "git_author": "Rainmakerprotocol",
    "git_commit": "86213086910b3bbcf53195f8b2b15980725ea078",
    "git_commit_date": "2025-10-13T23:53:10+00:00"
  },
  {
    "file": "agents/core/monitoring/metrics_storage/storage/hybrid_storage/backend.py",
    "line": 30,
    "code": "    _imported_get_database_storage = None",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "db_storage",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from ..file_storage import get_file_storage as _imported_get_file_storage\n    2: except Exception:  # pragma: no cover\n    3:     _imported_get_database_storage = None\n    4:     _imported_get_file_storage = None\n    5: ",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "agents/core/monitoring/metrics_storage/storage/hybrid_storage/backend.py",
    "line": 31,
    "code": "    _imported_get_file_storage = None",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "file_storage",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1: except Exception:  # pragma: no cover\n    2:     _imported_get_database_storage = None\n    3:     _imported_get_file_storage = None\n    4: \n    5: ",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "agents/core/monitoring/metrics_storage/error_metrics/repositories/db_repository.py",
    "line": 26,
    "code": "    QueryBuilder = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "db_storage",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1: except ImportError:  # pragma: no cover - exercised indirectly via feature flag tests\n    2:     QUERY_BUILDER_AVAILABLE = False\n    3:     QueryBuilder = None  # type: ignore\n    4: \n    5: ",
    "git_author": "Rainmakerprotocol",
    "git_commit": "a29e52e8620bbb1f062ed98c427f3a3258bb1c0b",
    "git_commit_date": "2025-10-09T19:11:14+00:00"
  },
  {
    "file": "agents/core/monitoring/metrics_storage/tests/backup/test_system_snapshot_schedule.py",
    "line": 16,
    "code": "    HashChainLedger = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "ledger",
    "is_test": true,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from ledger.hash_chain import HashChainLedger\n    2: except Exception:  # pragma: no cover\n    3:     HashChainLedger = None  # type: ignore\n    4: \n    5: ",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "agents/core/monitoring/metrics_storage/tests/backup/test_step_a_matrix.py",
    "line": 17,
    "code": "    BackupStorage = object  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "backup",
    "is_test": true,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from ...backup.storage import BackupStorage, BackupStrategy\n    2: except Exception:  # pragma: no cover\n    3:     BackupStorage = object  # type: ignore\n    4: \n    5:     class BackupStrategy:  # type: ignore",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "agents/core/monitoring/metrics_storage/tests/backup/test_step_a_matrix.py",
    "line": 26,
    "code": "    BackupOperations = object  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "backup",
    "is_test": true,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from ...backup.operations import BackupOperations\n    2: except Exception:  # pragma: no cover\n    3:     BackupOperations = object  # type: ignore\n    4: \n    5: try:  # verification",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "agents/core/monitoring/metrics_storage/tests/backup/test_step_a_matrix.py",
    "line": 31,
    "code": "    BackupVerifier = object  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "backup",
    "is_test": true,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from ...backup.verification import BackupStatus, BackupVerifier\n    2: except Exception:  # pragma: no cover\n    3:     BackupVerifier = object  # type: ignore\n    4: \n    5:     class BackupStatus:  # type: ignore",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "agents/core/monitoring/metrics_storage/tests/backup/test_step_a_matrix.py",
    "line": 40,
    "code": "    RestoreManager = object  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "backup",
    "is_test": true,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from ...backup.restore import RestoreManager, RestoreMode\n    2: except Exception:  # pragma: no cover\n    3:     RestoreManager = object  # type: ignore\n    4: \n    5:     class RestoreMode:  # type: ignore",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "agents/core/monitoring/metrics_storage/tests/backup/test_cli_run_due.py",
    "line": 13,
    "code": "    HashChainLedger = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "ledger",
    "is_test": true,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from ledger.hash_chain import HashChainLedger\n    2: except Exception:  # pragma: no cover\n    3:     HashChainLedger = None  # type: ignore\n    4: \n    5: from agents.core.monitoring.metrics_storage.cli import backup_commands as cli_mod",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "agents/core/monitoring/metrics_storage/tests/model_metrics/test_helper_modules.py",
    "line": 21,
    "code": "    sys.modules[PACKAGE_NAME] = package_stub",
    "category": "sys_modules_assignment",
    "intent": "module injection/aliasing",
    "import_base": "sys",
    "is_test": true,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     package_stub = types.ModuleType(PACKAGE_NAME)\n    2:     package_stub.__path__ = [str(MODULE_ROOT)]\n    3:     sys.modules[PACKAGE_NAME] = package_stub\n    4: \n    5: ",
    "git_author": "Rainmakerprotocol",
    "git_commit": "8f9cef967e4de1f4c9ea34b547f4f335d73049bc",
    "git_commit_date": "2025-10-10T21:01:01+00:00"
  },
  {
    "file": "agents/core/monitoring/metrics_storage/backup/operations_mod/__init__.py",
    "line": 31,
    "code": "    BackupStorage = object  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "storage",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from ..storage import BackupStorage, BackupStrategy  # type: ignore\n    2: except Exception:  # pragma: no cover\n    3:     BackupStorage = object  # type: ignore\n    4: \n    5:     class BackupStrategy:  # minimal fallback",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "agents/core/monitoring/metrics_storage/backup/restore_mod/manager.py",
    "line": 20,
    "code": "    BackupStorage = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "storage",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from ..storage import BackupStorage  # type: ignore\n    2: except Exception:  # pragma: no cover\n    3:     BackupStorage = None  # type: ignore\n    4: \n    5: ",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "api/routers/agent_config_perf.py",
    "line": 17,
    "code": "    config_metrics = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "agents",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from agents.orchestrator.config import metrics as config_metrics  # type: ignore\n    2: except Exception:  # pragma: no cover\n    3:     config_metrics = None  # type: ignore\n    4: \n    5: from api.deps import _security_dependency  # reuse internal auth (health_read scope)",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "api/routers/agent_config_reload.py",
    "line": 57,
    "code": "    load_registry = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "agents",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     )\n    2: except Exception:  # pragma: no cover - fallback minimal stubs\n    3:     load_registry = None  # type: ignore\n    4:     resolve_registry_path = None  # type: ignore\n    5: ",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "api/routers/agent_config_reload.py",
    "line": 58,
    "code": "    resolve_registry_path = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "agents",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1: except Exception:  # pragma: no cover - fallback minimal stubs\n    2:     load_registry = None  # type: ignore\n    3:     resolve_registry_path = None  # type: ignore\n    4: \n    5:     class ConfigNotFoundError(Exception):  # type: ignore",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "api/routers/agent_config_reload.py",
    "line": 70,
    "code": "    reload_registry = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "agents",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from agents.orchestrator.config.reload import reload_registry\n    2: except Exception:  # pragma: no cover\n    3:     reload_registry = None  # type: ignore\n    4: \n    5: try:  # redaction for metadata safety",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "api/routers/realtime.py",
    "line": 62,
    "code": "    _get_dashboard_toasts_since = None",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "api",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     )\n    2: except (ImportError, AttributeError):  # pragma: no cover\n    3:     _get_dashboard_toasts_since = None\n    4: \n    5: _LOG = logging.getLogger(__name__)",
    "git_author": "Rainmakerprotocol",
    "git_commit": "b8ea89e5bfb6d883ad12545f9e41215e328ad0a6",
    "git_commit_date": "2025-10-06T20:58:55+00:00"
  },
  {
    "file": "api/utils/http_cache.py",
    "line": 24,
    "code": "    Request = Any",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "fastapi",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from fastapi import Request\n    2: except Exception:  # pragma: no cover\n    3:     Request = Any\n    4: \n    5: ",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "api/cache/invalidation.py",
    "line": 28,
    "code": "        _TOKENS = getattr(_mod, \"INVALIDATION_TOKENS_SHARED\", {})",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "api_cache_shared",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1: \n    2:         _mod = importlib.import_module(\"api_cache_shared\")\n    3:         _TOKENS = getattr(_mod, \"INVALIDATION_TOKENS_SHARED\", {})\n    4:     except Exception:  # pragma: no cover - fallback\n    5:         _TOKENS = {}",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "api/cache/invalidation.py",
    "line": 30,
    "code": "        _TOKENS = {}",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "api_cache_shared",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:         _TOKENS = getattr(_mod, \"INVALIDATION_TOKENS_SHARED\", {})\n    2:     except Exception:  # pragma: no cover - fallback\n    3:         _TOKENS = {}\n    4: \n    5: ",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "api/cache/invalidation.py",
    "line": 119,
    "code": "        _NEGATIVE_PATHS_SHARED = getattr(",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "api_cache_shared",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1: \n    2:         _mod = importlib.import_module(\"api_cache_shared\")\n    3:         _NEGATIVE_PATHS_SHARED = getattr(\n    4:             _mod,\n    5:             \"NEGATIVE_PATHS_SHARED\",",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "api/cache/invalidation.py",
    "line": 125,
    "code": "        _NEGATIVE_PATHS_SHARED = set(filter(None, os.getenv(\"CACHE_NEGATIVE_PATHS\", \"\").split(\",\")))",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "api_cache_shared",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:         )\n    2:     except Exception:  # pragma: no cover - fallback\n    3:         _NEGATIVE_PATHS_SHARED = set(filter(None, os.getenv(\"CACHE_NEGATIVE_PATHS\", \"\").split(\",\")))\n    4: \n    5: ",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "api/routers/ui/handlers.py",
    "line": 48,
    "code": "    _dashboard_render_timer_impl = None",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "api",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from api.ui_data import dashboard_render_timer as _dashboard_render_timer_impl\n    2: except Exception:  # pragma: no cover - degrade gracefully when ui_data missing\n    3:     _dashboard_render_timer_impl = None\n    4: \n    5: try:  # pragma: no cover - instrumentation optional in some test shards",
    "git_author": "Rainmakerprotocol",
    "git_commit": "07c5ab5f48e9ecfaf0ca4423c11e820d810d045d",
    "git_commit_date": "2025-10-05T13:05:42+00:00"
  },
  {
    "file": "api/routers/ui/handlers.py",
    "line": 53,
    "code": "    _record_dashboard_notify_event_impl = None",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "api",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from api.ui_data import record_dashboard_notify_event as _record_dashboard_notify_event_impl\n    2: except Exception:  # pragma: no cover - degrade gracefully when ui_data missing\n    3:     _record_dashboard_notify_event_impl = None\n    4: \n    5: try:  # pragma: no cover - optional import",
    "git_author": "Rainmakerprotocol",
    "git_commit": "07c5ab5f48e9ecfaf0ca4423c11e820d810d045d",
    "git_commit_date": "2025-10-05T13:05:42+00:00"
  },
  {
    "file": "api/routers/ui/handlers.py",
    "line": 58,
    "code": "    _record_dashboard_toast_impl = None",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "api",
    "is_test": false,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from api.ui_data import record_dashboard_toast as _record_dashboard_toast_impl\n    2: except Exception:  # pragma: no cover\n    3:     _record_dashboard_toast_impl = None\n    4: \n    5: ",
    "git_author": "Rainmakerprotocol",
    "git_commit": "b8ea89e5bfb6d883ad12545f9e41215e328ad0a6",
    "git_commit_date": "2025-10-06T20:58:55+00:00"
  },
  {
    "file": "tests/api/test_ws_ui_scaffold.py",
    "line": 12,
    "code": "os.environ[\"ENABLE_UI_WS\"] = \"1\"  # ensure flag set before app import",
    "category": "global_env_mutation",
    "intent": "unspecified monkey patch",
    "import_base": "os",
    "is_test": true,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     HAS_WS = False\n    2: \n    3: os.environ[\"ENABLE_UI_WS\"] = \"1\"  # ensure flag set before app import\n    4: from fastapi.testclient import TestClient\n    5: ",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "tests/api/test_events_ws.py",
    "line": 8,
    "code": "os.environ[\"ENABLE_EVENTS\"] = \"1\"",
    "category": "global_env_mutation",
    "intent": "unspecified monkey patch",
    "import_base": "os",
    "is_test": true,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": "# Ensure the events router is enabled at import time",
    "context": "    1: \n    2: # Ensure the events router is enabled at import time\n    3: os.environ[\"ENABLE_EVENTS\"] = \"1\"\n    4: \n    5: from fastapi.testclient import TestClient",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "tests/api/test_events_ws_resubscribe.py",
    "line": 13,
    "code": "os.environ[\"ENABLE_EVENTS\"] = \"1\"",
    "category": "global_env_mutation",
    "intent": "unspecified monkey patch",
    "import_base": "os",
    "is_test": true,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": "# Ensure the events router is enabled and tests run with open auth/topic policy",
    "context": "    1: \n    2: # Ensure the events router is enabled and tests run with open auth/topic policy\n    3: os.environ[\"ENABLE_EVENTS\"] = \"1\"\n    4: os.environ[\"DISABLE_API_AUTH\"] = \"1\"\n    5: os.environ.pop(\"ALLOWED_TOPIC_PREFIXES\", None)",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "tests/api/test_events_ws_resubscribe.py",
    "line": 14,
    "code": "os.environ[\"DISABLE_API_AUTH\"] = \"1\"",
    "category": "global_env_mutation",
    "intent": "unspecified monkey patch",
    "import_base": "os",
    "is_test": true,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1: # Ensure the events router is enabled and tests run with open auth/topic policy\n    2: os.environ[\"ENABLE_EVENTS\"] = \"1\"\n    3: os.environ[\"DISABLE_API_AUTH\"] = \"1\"\n    4: os.environ.pop(\"ALLOWED_TOPIC_PREFIXES\", None)\n    5: ",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "tests/api/test_events_sse.py",
    "line": 14,
    "code": "os.environ[\"ENABLE_EVENTS\"] = \"1\"",
    "category": "global_env_mutation",
    "intent": "unspecified monkey patch",
    "import_base": "os",
    "is_test": true,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": "# Ensure flags before importing app so the router is included at import time",
    "context": "    1: \n    2: # Ensure flags before importing app so the router is included at import time\n    3: os.environ[\"ENABLE_EVENTS\"] = \"1\"\n    4: # Speed up heartbeats for deterministic SSE activity in tests\n    5: os.environ[\"EVENTS_SSE_HEARTBEAT_SEC\"] = \"0.2\"",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "tests/api/test_events_sse.py",
    "line": 16,
    "code": "os.environ[\"EVENTS_SSE_HEARTBEAT_SEC\"] = \"0.2\"",
    "category": "global_env_mutation",
    "intent": "unspecified monkey patch",
    "import_base": "os",
    "is_test": true,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": "# Speed up heartbeats for deterministic SSE activity in tests",
    "context": "    1: os.environ[\"ENABLE_EVENTS\"] = \"1\"\n    2: # Speed up heartbeats for deterministic SSE activity in tests\n    3: os.environ[\"EVENTS_SSE_HEARTBEAT_SEC\"] = \"0.2\"\n    4: os.environ[\"DISABLE_API_AUTH\"] = \"1\"\n    5: os.environ[\"ENABLE_EVENTS_ONESHOT\"] = \"1\"",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "tests/api/test_events_sse.py",
    "line": 17,
    "code": "os.environ[\"DISABLE_API_AUTH\"] = \"1\"",
    "category": "global_env_mutation",
    "intent": "unspecified monkey patch",
    "import_base": "os",
    "is_test": true,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1: # Speed up heartbeats for deterministic SSE activity in tests\n    2: os.environ[\"EVENTS_SSE_HEARTBEAT_SEC\"] = \"0.2\"\n    3: os.environ[\"DISABLE_API_AUTH\"] = \"1\"\n    4: os.environ[\"ENABLE_EVENTS_ONESHOT\"] = \"1\"\n    5: ",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "tests/api/test_events_sse.py",
    "line": 18,
    "code": "os.environ[\"ENABLE_EVENTS_ONESHOT\"] = \"1\"",
    "category": "global_env_mutation",
    "intent": "unspecified monkey patch",
    "import_base": "os",
    "is_test": true,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1: os.environ[\"EVENTS_SSE_HEARTBEAT_SEC\"] = \"0.2\"\n    2: os.environ[\"DISABLE_API_AUTH\"] = \"1\"\n    3: os.environ[\"ENABLE_EVENTS_ONESHOT\"] = \"1\"\n    4: \n    5: from api.server import app",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "tests/_plugins/timeouts.py",
    "line": 27,
    "code": "    faulthandler = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "faulthandler",
    "is_test": true,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     import threading\n    2: except Exception:  # pragma: no cover - environment dependent\n    3:     faulthandler = None  # type: ignore\n    4:     _sig = None  # type: ignore\n    5:     threading = None  # type: ignore",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "tests/_plugins/timeouts.py",
    "line": 28,
    "code": "    _sig = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "signal",
    "is_test": true,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1: except Exception:  # pragma: no cover - environment dependent\n    2:     faulthandler = None  # type: ignore\n    3:     _sig = None  # type: ignore\n    4:     threading = None  # type: ignore\n    5: ",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "tests/_plugins/timeouts.py",
    "line": 29,
    "code": "    threading = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "threading",
    "is_test": true,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     faulthandler = None  # type: ignore\n    2:     _sig = None  # type: ignore\n    3:     threading = None  # type: ignore\n    4: \n    5: _WATCHDOG_TIMER = None",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  },
  {
    "file": "tests/_plugins/ignore_rules.py",
    "line": 56,
    "code": "    PytestRemovedIn9Warning = None  # type: ignore",
    "category": "attribute_reassignment_on_import",
    "intent": "override third-party behavior",
    "import_base": "_pytest",
    "is_test": true,
    "is_module_scope": true,
    "function": null,
    "class_name": null,
    "nearby_comment": null,
    "context": "    1:     from _pytest.warning_types import PytestRemovedIn9Warning  # type: ignore\n    2: except Exception:  # pragma: no cover\n    3:     PytestRemovedIn9Warning = None  # type: ignore\n    4: if PytestRemovedIn9Warning is not None:\n    5:     warnings.filterwarnings(\"ignore\", category=PytestRemovedIn9Warning)",
    "git_author": "Rainmakerprotocol",
    "git_commit": "c2c1b1d60360035266e485fdcf715ffb8a825f1f",
    "git_commit_date": "2025-10-02T12:41:49+00:00"
  }
]